{"version":3,"file":"static/js/124.f39a3941.chunk.js","mappings":"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","sources":["hooks/useReaderFile.ts","i18n/index.ts","components/antd/Tabs/Tabs.tsx","components/antd/Tabs/index.ts","components/antd/Tree/Tree.tsx","components/antd/Tree/index.ts","components/antd/Form/Form.hook.ts","webpack://poc-app/./src/pages/configuration_hierachy_data/components/GeoInfo/GeoInfo.styles.module.scss?5353","pages/configuration_hierachy_data/components/GeoInfo/GeoInfo.Dragger.tsx","pages/configuration_hierachy_data/components/GeoInfo/GeoInfo.tsx","pages/configuration_hierachy_data/components/GeoInfo/index.ts","components/antd/Table/Table.tsx","components/antd/Table/index.ts","pages/configuration_hierachy_data/components/Region/Region.zustand.ts","components/antd/Input/Input.utils.ts","components/antd/Input/Input.hook.ts","webpack://poc-app/./src/pages/configuration_hierachy_data/components/Region/Region.styles.module.scss?9faa","pages/configuration_hierachy_data/components/Region/Region.FormOperation.tsx","pages/configuration_hierachy_data/components/Region/Region.Modal.tsx","pages/configuration_hierachy_data/components/Region/Region.tsx","pages/configuration_hierachy_data/components/Region/index.ts","pages/configuration_hierachy_data/components/EnergyRanking/EnergyRanking.zustand.ts","pages/configuration_hierachy_data/components/EnergyRanking/EnergyRanking.FormOperation.tsx","pages/configuration_hierachy_data/components/EnergyRanking/EnergyRanking.Modal.tsx","pages/configuration_hierachy_data/components/EnergyRanking/EnergyRanking.tsx","pages/configuration_hierachy_data/components/EnergyRanking/index.ts","pages/configuration_hierachy_data/components/AlertsAndTickets/AlertsAndTickets.zustand.ts","webpack://poc-app/./src/pages/configuration_hierachy_data/components/AlertsAndTickets/AlertsAndTickets.styles.module.scss?ca18","pages/configuration_hierachy_data/components/AlertsAndTickets/AlertsAndTickets.FormOperation.tsx","pages/configuration_hierachy_data/components/AlertsAndTickets/AlertsAndTickets.Modal.tsx","pages/configuration_hierachy_data/components/AlertsAndTickets/AlertsAndTickets.tsx","pages/configuration_hierachy_data/components/AlertsAndTickets/index.ts","pages/configuration_hierachy_data/components/DataResource/index.tsx","pages/configuration_hierachy_data/index.tsx"],"sourcesContent":["import React from \"react\";\nimport { isJSONString } from \"utils/isJSONString\";\nimport * as d3 from \"d3\";\n\nexport type FILE_TYPE =\n  | \"application/json\"\n  | \"text/tab-separated-values\"\n  | \"text/comma-separated-values\"\n  | \"\";\n\n/**\n * useReaderFile is a hook function use FileReader to read json file from user selection\n * reference link: https://stackoverflow.com/questions/23344776/how-to-access-data-of-uploaded-json-file\n * @returns {\n *  readData: ({\n *      files: FileList; // data input\n *      callbackSetData: (jsonData: string) => void; // a callback function use to handle read JSON data\n *      callbackHandleError?: (error: any) => void; // a callback function use to handle error JSON data\n * }) => void\n * }\n */\nexport const useReaderFile = () => {\n  const handleValidateAcceptType = React.useCallback(\n    (file: File, accept: FILE_TYPE) => !!file.type.match(accept),\n    []\n  );\n  const readData = React.useCallback(\n    ({\n      files,\n      callbackSetData,\n      callbackHandleError,\n    }: {\n      files: FileList | File[];\n      callbackSetData: (jsonData: string, ...rest: any) => void;\n      callbackHandleError?: (error: any) => void;\n    }) => {\n      try {\n        const file = files[0];\n        if (file) {\n          const { type } = file;\n          const reader = new FileReader();\n          reader.addEventListener(\"load\", () => {\n            const result = reader.result as string;\n            let jsonString = \"\";\n            if (type.match(\"application/json\")) {\n              if (isJSONString(result)) {\n                jsonString = result;\n              }\n            } else if (\n              type.match(\"text/tab-separated-values\") ||\n              type.match(\"text/tsv\")\n            ) {\n              jsonString = JSON.stringify(d3.tsvParse(result));\n            } else if (\n              type.match(\"text/comma-separated-values\") ||\n              type.match(\"text/csv\")\n            ) {\n              jsonString = JSON.stringify(d3.csvParse(result));\n            } else {\n              jsonString = result;\n            }\n            callbackSetData(jsonString, file);\n          });\n          reader.removeEventListener(\"load\", () => null);\n          reader.readAsText(file);\n        }\n      } catch (error) {\n        if (typeof callbackHandleError === \"function\") {\n          callbackHandleError(error);\n        }\n      }\n    },\n    []\n  );\n  return {\n    readData,\n    handleValidateAcceptType,\n  };\n};\n","import localization from \"./localization/default.json\";\n\nexport const useI18n = () => {\n  const t = (key: string | any) => {\n    const localizationObj: {\n      [key: string]: string;\n    } = { ...localization };\n    return localizationObj[key] || key;\n  };\n  return t;\n};\n","import React from \"react\";\nimport { Tabs } from \"antd\";\nimport { ITabs } from \"./Tabs.typings\";\n\nconst { TabPane } = Tabs;\n\nconst AntdTabs: React.FC<ITabs> = ({\n  tabPanes,\n  onChangeTab = undefined,\n  ...rest\n}) => {\n  const [tabSelected, setTabSelected] = React.useState(tabPanes[0].key);\n  const onChange = React.useCallback(\n    (key: string) => {\n      setTabSelected(key);\n      if (typeof onChangeTab === \"function\") {\n        onChangeTab(key);\n      }\n    },\n    [onChangeTab]\n  );\n  return (\n    <Tabs\n      defaultActiveKey={tabSelected}\n      activeKey={tabSelected}\n      onChange={onChange}\n      destroyInactiveTabPane\n      {...rest}\n    >\n      {tabPanes.map(({ key, tab, children, ...restTabPane }) => {\n        const isSelected = key === tabSelected;\n        return (\n          <TabPane\n            key={key}\n            tab={\n              <div\n                className={`${\n                  isSelected ? \"text-white font-medium\" : \"text-gray-400\"\n                }`}\n              >\n                {tab}\n              </div>\n            }\n            {...restTabPane}\n          >\n            {children && children}\n          </TabPane>\n        );\n      })}\n    </Tabs>\n  );\n};\n\nexport default React.memo(AntdTabs);\n","import Tabs from \"./Tabs\";\n\nexport * from \"./Tabs.typings\";\n\nexport default Tabs;\n","/* eslint-disable react/no-unstable-nested-components */\nimport { Tree } from \"antd\";\nimport { CaretDownFilled } from \"@ant-design/icons\";\nimport React from \"react\";\nimport { DataNode } from \"antd/lib/tree\";\nimport { Key } from \"rc-tree/lib/interface\";\nimport { ITree } from \"./Tree.typings\";\n\nconst TitleRender = React.memo(\n  ({ keys, node }: { keys: Key[]; node: DataNode }) => {\n    const isSelected = keys[0] === node.key;\n    return (\n      <div\n        key={node.key}\n        className={`${isSelected ? \"text-white font-medium\" : \"text-gray-400\"}`}\n      >\n        {node.title as React.ReactNode}\n      </div>\n    );\n  }\n);\n\nconst AntdTree: React.FC<ITree> = ({ onSelectKey, treeData = [], ...rest }) => {\n  const [keys, setSelectedKeys] = React.useState<Key[]>([]);\n  React.useEffect(() => {\n    setSelectedKeys([treeData[0]?.key]);\n  }, [treeData]);\n  return (\n    <Tree\n      defaultExpandAll={false}\n      onSelect={(selectedKeys) => {\n        if (selectedKeys?.length > 0) {\n          setSelectedKeys(selectedKeys);\n          if (typeof onSelectKey === \"function\") {\n            onSelectKey(selectedKeys);\n          }\n        }\n      }}\n      titleRender={(node: DataNode) => <TitleRender {...{ node, keys }} />}\n      switcherIcon={<CaretDownFilled className=\"text-white\" />}\n      treeData={treeData}\n      defaultSelectedKeys={keys}\n      {...rest}\n    />\n  );\n};\n\nexport default React.memo(AntdTree);\n","import Tree from \"./Tree\";\n\nexport * from \"./Tree.typings\";\n\nexport default Tree;\n","import React from \"react\";\nimport { FieldData, FieldName, FieldProperty } from \"./Form.typings\";\n\nexport const useOperationFormControlled = (\n  fields: FieldData[],\n  initialValues?: { [key: string]: any }\n) => {\n  const [formFields, setFormFields] = React.useState<FieldData[]>(fields);\n  React.useEffect(() => {\n    if (!initialValues) {\n      return;\n    }\n    setFormFields(\n      fields.map((field) => {\n        const { name } = field;\n        return {\n          ...field,\n          name,\n          value: initialValues[name],\n        };\n      })\n    );\n  }, [initialValues]);\n  const form = React.useMemo(() => {\n    const getFormFields = (property: FieldProperty) =>\n      formFields.reduce((prev: any, curr: FieldData) => {\n        const newPrev = { ...prev };\n        newPrev[curr.name] = curr[property];\n        return newPrev;\n      }, {} as { [key: string]: any });\n    const getFieldsValue = () => getFormFields(\"value\");\n    const getFieldValue = (fieldName: FieldName) => {\n      const fieldsValue = getFieldsValue();\n      return fieldsValue[fieldName];\n    };\n    const getFieldsError = () => getFormFields(\"errors\");\n    const getFieldError = (fieldName: FieldName) => {\n      const fieldsError = getFieldsValue();\n      return fieldsError[fieldName];\n    };\n    const disabled = formFields.some(\n      ({ value, errors = [] }) => !value || errors?.length > 0\n    );\n    return {\n      getFieldValue,\n      getFieldsValue,\n      getFieldError,\n      getFieldsError,\n      disabled,\n    };\n  }, [formFields]);\n  return {\n    formFields,\n    setFormFields,\n    ...form,\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formOperationGeojson\":\"GeoInfo_styles_formOperationGeojson__6ELRT\"};","import { InboxOutlined, PlusOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport { ModalControl } from \"components/antd/Modal\";\nimport { useReaderFile } from \"hooks/useReaderFile\";\nimport { FormType, useOperationFormControlled } from \"components/antd/Form\";\nimport { Upload, Button, Input, Form, Row } from \"antd\";\nimport { RcFile, UploadChangeParam, UploadFile } from \"antd/lib/upload\";\nimport {\n  GEOJSON_INFO_COUNTRY,\n  GEOJSON_INFO_DATA,\n  GEOJSON_INFO_RECORD_COLUMN,\n  useMutationOperationGeojsonMapOfACountry,\n  useSelectedCountry,\n} from \"pages/hierachy_map\";\nimport React from \"react\";\nimport styles from \"./GeoInfo.styles.module.scss\";\n\ntype GeoInfoDraggerProps = {\n  isCreate: boolean;\n};\n\nconst DraggerForm = ({\n  isCreate,\n  form: { formFields: fields, setFormFields: setFields },\n  setGeojsonCountry,\n}: {\n  isCreate: boolean;\n  form: FormType;\n  setGeojsonCountry: React.Dispatch<React.SetStateAction<any>>;\n}) => {\n  const [form] = Form.useForm();\n  const { readData, handleValidateAcceptType } = useReaderFile();\n  return (\n    <Form\n      form={form}\n      name=\"form-operation-geojson\"\n      fields={fields}\n      onFieldsChange={(_, allFields) => setFields(allFields)}\n      className={styles.formOperationGeojson}\n    >\n      <Form.Item\n        label={GEOJSON_INFO_RECORD_COLUMN[GEOJSON_INFO_COUNTRY]}\n        name={GEOJSON_INFO_COUNTRY}\n        rules={[{ required: true, message: \"Please input country's name!\" }]}\n      >\n        <Input disabled={!isCreate} />\n      </Form.Item>\n      <Form.Item\n        label={GEOJSON_INFO_RECORD_COLUMN[GEOJSON_INFO_DATA]}\n        name={GEOJSON_INFO_DATA}\n        rules={[\n          {\n            required: true,\n            message: \"Please select a json file!\",\n          },\n        ]}\n        valuePropName=\"fileList\"\n        getValueFromEvent={(info: UploadChangeParam<UploadFile<any>>) =>\n          info.fileList\n        }\n      >\n        <Upload.Dragger\n          className=\"antd-dragger bg-primary-100\"\n          beforeUpload={(file: RcFile, files: RcFile[]) => {\n            const isJSONFile = handleValidateAcceptType(\n              file,\n              \"application/json\"\n            );\n            if (!isJSONFile) {\n              return Upload.LIST_IGNORE;\n            }\n            readData({\n              files,\n              callbackSetData: (jsonData: string) => {\n                const jsonParse = JSON.parse(jsonData);\n                setGeojsonCountry(jsonParse);\n              },\n            });\n            return false;\n          }}\n          multiple={false}\n          maxCount={1}\n          accept=\"application/json\"\n        >\n          <p className=\"ant-upload-drag-icon\">\n            <InboxOutlined />\n          </p>\n          <p className=\"ant-upload-text text-white\">\n            Click or drag file to this area to upload\n          </p>\n          <p className=\"ant-upload-hint text-gray-500\">\n            Support for a single or bulk upload. Strictly prohibit\n            <br />\n            from uploading company data or other band files\n          </p>\n        </Upload.Dragger>\n      </Form.Item>\n    </Form>\n  );\n};\n\nconst GeoInfoDragger: React.FC<GeoInfoDraggerProps> = ({ isCreate }) => {\n  const [isVisible, setVisibleModal] = React.useState(false);\n  const mutation = useMutationOperationGeojsonMapOfACountry({ isCreate });\n  const {\n    country: { country: defaultCountry },\n  } = useSelectedCountry();\n  const [geojsonCountry, setGeojsonCountry] = React.useState({});\n  const initialValues = React.useMemo(\n    () =>\n      isCreate && defaultCountry\n        ? undefined\n        : { [GEOJSON_INFO_COUNTRY]: defaultCountry },\n    [defaultCountry, isCreate]\n  );\n  const form = useOperationFormControlled(\n    [\n      { name: GEOJSON_INFO_COUNTRY, value: \"\" },\n      { name: GEOJSON_INFO_DATA, value: \"\" },\n    ],\n    initialValues\n  );\n  const { disabled, getFieldsValue } = form;\n  const handleCreateGeojsonMapOfACountry = React.useCallback(async () => {\n    try {\n      if (disabled) {\n        return;\n      }\n      const formFields = getFieldsValue();\n      await mutation.mutateAsync({\n        [GEOJSON_INFO_COUNTRY]: formFields[GEOJSON_INFO_COUNTRY],\n        [GEOJSON_INFO_DATA]: geojsonCountry,\n      });\n    } catch (error) {\n      //\n    }\n  }, [disabled, getFieldsValue, geojsonCountry]);\n  return (\n    <Row>\n      <Button\n        type=\"primary\"\n        className=\"flex items-center\"\n        icon={isCreate ? <PlusOutlined /> : <UploadOutlined />}\n        onClick={() => setVisibleModal(true)}\n      >\n        {isCreate ? \"Add new\" : \"Upload geojson\"}\n      </Button>\n      <ModalControl\n        title=\"Form\"\n        visible={isVisible}\n        onCancel={() => setVisibleModal(false)}\n        okButtonProps={{ disabled }}\n        onOk={async () => {\n          await handleCreateGeojsonMapOfACountry();\n          setVisibleModal(false);\n        }}\n        confirmLoading={mutation.isLoading}\n      >\n        <DraggerForm\n          isCreate={isCreate}\n          form={form}\n          setGeojsonCountry={setGeojsonCountry}\n        />\n      </ModalControl>\n    </Row>\n  );\n};\n\nexport default React.memo(GeoInfoDragger);\n","import React from \"react\";\nimport { Button, Skeleton, Space } from \"antd\";\nimport {\n  useSelectedCountry,\n  useGeojsonRegions,\n  useMutationUpdateActiveCountry,\n} from \"pages/hierachy_map\";\nimport { D3HierachyChart3D } from \"components/charts/D3Hierachy\";\nimport { CheckCircleOutlined } from \"@ant-design/icons\";\nimport ConfigurationGeoInfoDragger from \"./GeoInfo.Dragger\";\n\nconst GeoInfo = () => {\n  const { geojsonRegions, isLoading } = useGeojsonRegions();\n  const {\n    country: { actived, id },\n  } = useSelectedCountry();\n  const mutateUpdateActiveCountry = useMutationUpdateActiveCountry();\n  return (\n    <>\n      <Space>\n        <ConfigurationGeoInfoDragger isCreate={false} />\n        <Button\n          type=\"primary\"\n          loading={mutateUpdateActiveCountry.isLoading}\n          onClick={() => mutateUpdateActiveCountry.mutate(id)}\n          className={`bg-green flex items-center ${\n            actived ? \"ant-btn-actived\" : \"\"\n          }`}\n          icon={<CheckCircleOutlined />}\n        >\n          {actived ? \"Actived\" : \"Active\"}\n        </Button>\n      </Space>\n      {isLoading ? (\n        <Skeleton className=\"mt-4\" />\n      ) : (\n        <D3HierachyChart3D\n          data={{\n            hierachy: geojsonRegions,\n            width: \"auto\",\n            height: 480,\n          }}\n          classNameContainer=\"z-1\"\n        />\n      )}\n    </>\n  );\n};\n\nexport default React.memo(GeoInfo);\n","import GeoInfo from \"./GeoInfo\";\n\nexport { default as GeoInfoDragger } from \"./GeoInfo.Dragger\";\n\nexport default GeoInfo;\n","import {\n  DeleteOutlined,\n  EditOutlined,\n  LeftOutlined,\n  RightOutlined,\n} from \"@ant-design/icons\";\nimport { Popconfirm, Space, Table, TableProps } from \"antd\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport React from \"react\";\n\nconst AntdTable: React.FC<\n  TableProps<any> & {\n    hasOperationColumn?: boolean;\n    onEditRecord?: (value: any, record: any, index: number) => any;\n    onRemoveRecord?: (value: any, record: any, index: number) => any;\n  }\n> = (props) => {\n  const {\n    dataSource,\n    columns = [],\n    onEditRecord,\n    onRemoveRecord,\n    hasOperationColumn,\n    ...rest\n  } = props;\n  const columnsWithOperation: ColumnsType<any> = React.useMemo(\n    () => [\n      ...columns,\n      {\n        title: \"\",\n        key: \"operation\",\n        render: (...renderProps) => (\n          <Space>\n            {typeof onEditRecord === \"function\" && (\n              <EditOutlined onClick={() => onEditRecord(...renderProps)} />\n            )}\n\n            {typeof onRemoveRecord === \"function\" && (\n              <Popconfirm\n                title=\"Are you sure to remove this record?\"\n                onConfirm={() => onRemoveRecord(...renderProps)}\n              >\n                <DeleteOutlined />\n              </Popconfirm>\n            )}\n          </Space>\n        ),\n        fixed: \"right\",\n      },\n    ],\n    [columns, hasOperationColumn, onEditRecord, onRemoveRecord]\n  );\n  const handleShowTotal = React.useCallback(\n    (total: number) => (\n      <div className=\"text-xs font-medium absolute left-0 \">Total: {total}</div>\n    ),\n    [dataSource]\n  );\n  const handleRenderPaginationItem = React.useCallback(\n    (\n      page: number,\n      type: \"page\" | \"prev\" | \"next\" | \"jump-prev\" | \"jump-next\"\n    ) => {\n      switch (type) {\n        case \"page\":\n          return page;\n        case \"next\":\n          return <RightOutlined />;\n        case \"prev\":\n          return <LeftOutlined />;\n        case \"jump-next\":\n        case \"jump-prev\":\n          return <>...</>;\n        default:\n          break;\n      }\n      return <div>{page}</div>;\n    },\n    [dataSource]\n  );\n  return (\n    <Table\n      size=\"small\"\n      pagination={{\n        position: [\"none\" as any, \"bottomCenter\"],\n        showTotal: handleShowTotal,\n        itemRender: handleRenderPaginationItem,\n      }}\n      columns={hasOperationColumn ? columnsWithOperation : columns}\n      dataSource={dataSource}\n      {...rest}\n    />\n  );\n};\n\nAntdTable.defaultProps = {\n  onEditRecord: undefined,\n  onRemoveRecord: undefined,\n  hasOperationColumn: false,\n};\n\nexport default React.memo(AntdTable);\n","import AntdTable from \"./Table\";\n\nexport default AntdTable;\n","import {\n  REGION_ENERGY_CONSUMPTION,\n  EnergyConsumptionUnit,\n  RegionProperty,\n} from \"pages/hierachy_map\";\nimport { createStore } from \"zustand-store\";\nimport { ModalOperationRegion } from \"./Region.typings\";\n\ntype IState = {\n  modalOperationRegion: ModalOperationRegion;\n  units: {\n    [key: string]: any;\n  };\n};\n\ninterface IActions {\n  setModalOperationRegion: (modalData: ModalOperationRegion) => any;\n  setUnitsOperationRegion: (key: RegionProperty, value: any) => any;\n}\n\nconst initialState = {\n  modalOperationRegion: {\n    isVisible: false,\n    isCreate: false,\n    region: undefined,\n  },\n  units: {\n    [REGION_ENERGY_CONSUMPTION]: \"baseWatt\" as EnergyConsumptionUnit,\n  },\n};\n\nexport const [useConfigurationRegion, { getState, destroy }] = createStore<\n  IState & IActions\n>(\n  (set, get) => ({\n    ...initialState,\n    setModalOperationRegion: (modalOperationRegion) => {\n      const { isVisible } = modalOperationRegion;\n      if (isVisible) {\n        set({\n          modalOperationRegion: {\n            ...get().modalOperationRegion,\n            ...modalOperationRegion,\n          },\n        });\n      } else {\n        set({ modalOperationRegion: { ...initialState.modalOperationRegion } });\n      }\n    },\n    setUnitsOperationRegion: (key, value) => {\n      const { units } = get();\n      set({ units: { ...units, [key]: value } });\n    },\n    resetStore: () => set({ ...initialState }),\n  }),\n  \"ConfigurationStore\"\n);\n\nexport const useUnitsOperationRegion = (key: RegionProperty) => {\n  const { units, setUnitsOperationRegion } = useConfigurationRegion();\n  const selectedUnit = units[key];\n  return { selectedUnit, setUnitsOperationRegion };\n};\n","import toNumber from \"lodash/toNumber\";\nimport { Rule } from \"rc-field-form/lib/interface\";\nimport isNaN from \"lodash/isNaN\";\nimport { RuleInputNumber } from \"./Input.typings\";\n\nexport const required: Rule = {\n  required: true,\n  message: \"Required\",\n};\n\nexport const validNumber: RuleInputNumber = {\n  message: \"Please enter a valid number\",\n  validator(rule, value) {\n    const valToNumber = toNumber(value);\n    if (isNaN(valToNumber)) {\n      return Promise.reject(rule.message);\n    }\n    return Promise.resolve(value);\n  },\n};\n\nexport const positiveNumber: RuleInputNumber = {\n  message: \"Number has to > 0\",\n  validator(rule, value) {\n    const valToNumber = toNumber(value);\n    if (isNaN(valToNumber) || valToNumber > 0 || !value) {\n      return Promise.resolve(value);\n    }\n    return Promise.reject(rule.message);\n  },\n};\n\nexport const getValidatorInputNumber: () => Rule[] = () => [\n  required,\n  validNumber,\n  positiveNumber,\n];\n","import { Rule } from \"rc-field-form/lib/interface\";\nimport { useI18n } from \"i18n\";\nimport React from \"react\";\nimport { getValidatorInputNumber, required } from \"./Input.utils\";\n\n/**\n * useValidatorInputNumber\n * This hook will return validator for input number. Message will be translator by i18n\n * NOTE!\n * You have you normal input (<Input />) to make sure it's work right. <InputNumber /> don't fire validator when type\n * @returns {validator: RuleInputNumber[]}\n */\nexport const useValidatorInputNumber: () => {\n  validator: Rule[];\n} = () => {\n  const t = useI18n();\n  return React.useMemo(() => {\n    const validator: Rule[] = getValidatorInputNumber();\n    return { validator };\n  }, [t]);\n};\n\n/**\n * useValidatorInput\n * This hook will return validator for input. Message will be translator by i18n\n * @returns {validator: Rule[]}\n */\nexport const useValidatorInput = () => {\n  const t = useI18n();\n  return React.useMemo(() => {\n    const validator: Rule[] = [required];\n    return { validator };\n  }, [t]);\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formOperationRegion\":\"Region_styles_formOperationRegion__+PKaB\"};","import React from \"react\";\nimport { Form, Input, Select, Space, Tooltip } from \"antd\";\nimport { useValidatorInputNumber } from \"components/antd/Input\";\nimport { FormType } from \"components/antd/Form\";\nimport {\n  EnergyConsumptionUnit,\n  Region,\n  REGION_RECORD_COLUMN,\n  REGION_BUILDINGS,\n  REGION_ENERGY_CONSUMPTION,\n  REGION_ENERGY_DENSITY_CONSUMPTION,\n  REGION_FLOOR_AREA,\n  REGION_NAME,\n  REGION_OPEN_TICKETS,\n  REGION_ALERT_TICKETS,\n} from \"pages/hierachy_map\";\nimport {\n  convertECByUnit,\n  EC_UNITS,\n  formatterValueToLocaleString,\n} from \"pages/hierachy_map/Map.utils\";\nimport styles from \"./Region.styles.module.scss\";\nimport {\n  useConfigurationRegion,\n  useUnitsOperationRegion,\n} from \"./Region.zustand\";\n\nconst { Option } = Select;\n\nconst FormOperationRegion: React.FC<{\n  form: FormType;\n  isCreate: boolean;\n  region?: Region;\n}> = ({\n  form: { getFieldValue, formFields: fields, setFormFields: setFields },\n  isCreate,\n  region,\n}) => {\n  const [form] = Form.useForm();\n  const {\n    modalOperationRegion: { isVisible },\n  } = useConfigurationRegion();\n  const isUpdated = !isCreate && region && isVisible;\n  const { validator: validatorInputNumber } = useValidatorInputNumber();\n  const { selectedUnit: ecUnit, setUnitsOperationRegion: setEcUnit } =\n    useUnitsOperationRegion(REGION_ENERGY_CONSUMPTION);\n  const ec = getFieldValue(REGION_ENERGY_CONSUMPTION);\n  const ecConverted = convertECByUnit({\n    value: ec,\n    unit: ecUnit as EnergyConsumptionUnit,\n  });\n  return (\n    <Form\n      form={form}\n      name=\"form-operation-geojson\"\n      fields={fields}\n      onFieldsChange={(_, allFields) => setFields(allFields)}\n      className={`form-operation-region ${styles.formOperationRegion}`}\n    >\n      <Form.Item label={REGION_RECORD_COLUMN[REGION_NAME]} name={REGION_NAME}>\n        <Input disabled={!isCreate} />\n      </Form.Item>\n      <Form.Item\n        label={REGION_RECORD_COLUMN[REGION_ENERGY_CONSUMPTION]}\n        name={REGION_ENERGY_CONSUMPTION}\n        rules={validatorInputNumber}\n      >\n        <Space>\n          <Input\n            defaultValue={isUpdated ? region[REGION_ENERGY_CONSUMPTION] : \"\"}\n            className=\"ant-input-number\"\n          />\n          <Tooltip\n            title={`Equivalent ${formatterValueToLocaleString({\n              value: ecConverted,\n              divide: 1,\n            })} ${EC_UNITS.baseWatt}`}\n          >\n            <Select\n              defaultValue={ecUnit}\n              onChange={(unit) => setEcUnit(REGION_ENERGY_CONSUMPTION, unit)}\n              className=\"w-[70px]\"\n            >\n              {Object.entries(EC_UNITS).map(([key, value]) => (\n                <Option key={key} value={key}>\n                  {value}\n                </Option>\n              ))}\n            </Select>\n          </Tooltip>\n        </Space>\n      </Form.Item>\n      <Form.Item\n        label={REGION_RECORD_COLUMN[REGION_ENERGY_DENSITY_CONSUMPTION]}\n        name={REGION_ENERGY_DENSITY_CONSUMPTION}\n        rules={validatorInputNumber}\n      >\n        <Input className=\"ant-input-number\" />\n      </Form.Item>\n      <Form.Item\n        label={REGION_RECORD_COLUMN[REGION_OPEN_TICKETS]}\n        name={REGION_OPEN_TICKETS}\n        rules={validatorInputNumber}\n      >\n        <Input className=\"ant-input-number\" />\n      </Form.Item>\n      <Form.Item\n        label={REGION_RECORD_COLUMN[REGION_ALERT_TICKETS]}\n        name={REGION_ALERT_TICKETS}\n        rules={validatorInputNumber}\n      >\n        <Input className=\"ant-input-number\" />\n      </Form.Item>\n      <Form.Item\n        label={REGION_RECORD_COLUMN[REGION_BUILDINGS]}\n        name={REGION_BUILDINGS}\n        rules={validatorInputNumber}\n      >\n        <Input className=\"ant-input-number\" />\n      </Form.Item>\n      <Form.Item\n        label={REGION_RECORD_COLUMN[REGION_FLOOR_AREA]}\n        name={REGION_FLOOR_AREA}\n        rules={validatorInputNumber}\n      >\n        <Input className=\"ant-input-number\" />\n      </Form.Item>\n    </Form>\n  );\n};\n\nFormOperationRegion.defaultProps = {\n  region: undefined,\n};\n\nexport default React.memo(FormOperationRegion);\n","import React from \"react\";\nimport { useOperationFormControlled } from \"components/antd/Form\";\nimport { ModalControl } from \"components/antd/Modal\";\nimport {\n  EnergyConsumptionUnit,\n  REGION_ALERT_TICKETS,\n  REGION_BUILDINGS,\n  REGION_ENERGY_CONSUMPTION,\n  REGION_ENERGY_DENSITY_CONSUMPTION,\n  REGION_FLOOR_AREA,\n  REGION_NAME,\n  REGION_OPEN_TICKETS,\n  useMutationOperationRegion,\n} from \"pages/hierachy_map\";\nimport { convertECByUnit } from \"pages/hierachy_map/Map.utils\";\nimport {\n  useConfigurationRegion,\n  useUnitsOperationRegion,\n} from \"./Region.zustand\";\nimport ConfigurationFormOperationRegion from \"./Region.FormOperation\";\n\nconst OperationRegion = () => {\n  const {\n    modalOperationRegion: { isCreate, region, isVisible },\n    setModalOperationRegion,\n  } = useConfigurationRegion();\n  const { selectedUnit: ecUnit } = useUnitsOperationRegion(\n    REGION_ENERGY_CONSUMPTION\n  );\n  const mutationUpdateRegion = useMutationOperationRegion({ isCreate });\n  const form = useOperationFormControlled(\n    [\n      { name: REGION_NAME, value: \"\" },\n      { name: REGION_ENERGY_CONSUMPTION, value: \"\" },\n      { name: REGION_ENERGY_DENSITY_CONSUMPTION, value: \"\" },\n      { name: REGION_OPEN_TICKETS, value: \"\" },\n      { name: REGION_ALERT_TICKETS, value: \"\" },\n      { name: REGION_BUILDINGS, value: \"\" },\n      { name: REGION_FLOOR_AREA, value: \"\" },\n    ],\n    region\n  );\n  const { disabled, getFieldsValue } = form;\n  const handleOperationRegion = React.useCallback(async () => {\n    try {\n      if (disabled) {\n        return;\n      }\n      const formFields = getFieldsValue();\n      const { [REGION_ENERGY_CONSUMPTION]: ec } = formFields;\n      const energyConsumption = convertECByUnit({\n        value: ec,\n        unit: ecUnit as EnergyConsumptionUnit,\n      });\n      await mutationUpdateRegion.mutateAsync({\n        region: formFields[REGION_NAME],\n        info: {\n          [REGION_ENERGY_CONSUMPTION]: energyConsumption,\n          [REGION_ENERGY_DENSITY_CONSUMPTION]:\n            formFields[REGION_ENERGY_DENSITY_CONSUMPTION],\n          [REGION_OPEN_TICKETS]: formFields[REGION_OPEN_TICKETS],\n          [REGION_ALERT_TICKETS]: formFields[REGION_ALERT_TICKETS],\n          [REGION_BUILDINGS]: formFields[REGION_BUILDINGS],\n          [REGION_FLOOR_AREA]: formFields[REGION_FLOOR_AREA],\n        },\n      });\n    } catch (error) {\n      //\n    }\n  }, [disabled, ecUnit]);\n  return (\n    <ModalControl\n      title=\"Form\"\n      visible={isVisible}\n      onCancel={() => setModalOperationRegion({ isVisible: false, isCreate })}\n      okButtonProps={{ disabled }}\n      onOk={async () => {\n        await handleOperationRegion();\n        setModalOperationRegion({ isVisible: false, isCreate });\n      }}\n      confirmLoading={mutationUpdateRegion.isLoading}\n      destroyOnClose\n    >\n      <ConfigurationFormOperationRegion\n        isCreate={isCreate}\n        region={region}\n        form={form}\n      />\n    </ModalControl>\n  );\n};\n\nexport default React.memo(OperationRegion);\n","import { PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Space } from \"antd\";\nimport Table from \"components/antd/Table\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport {\n  formatterValueToLocaleString,\n  Region,\n  RegionResponse,\n  REGION_ALERT_TICKETS,\n  REGION_BUILDINGS,\n  REGION_COORDINATES,\n  REGION_ENERGY_CONSUMPTION,\n  REGION_ENERGY_DENSITY_CONSUMPTION,\n  REGION_FLOOR_AREA,\n  REGION_NAME,\n  REGION_OPEN_TICKETS,\n  REGION_RECORD_COLUMN,\n  useMutationAutoGenerateRegion,\n  useMutationDeleteRegion,\n  useRegionListData,\n  useSelectedCountry,\n} from \"pages/hierachy_map\";\nimport React from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport ConfigurationModalOperationRegion from \"./Region.Modal\";\nimport { useConfigurationRegion } from \"./Region.zustand\";\n\nconst ConfigurationRegion = () => {\n  const { setModalOperationRegion } = useConfigurationRegion();\n  const queryClient = useQueryClient();\n  const {\n    country: { country },\n  } = useSelectedCountry();\n  const { regionList: dataSource, isLoading } = useRegionListData();\n  const mutationAutoGenerateRegion = useMutationAutoGenerateRegion();\n  const mutationDeleteRegion = useMutationDeleteRegion();\n  const columns: ColumnsType<Region> = [\n    {\n      title: REGION_RECORD_COLUMN[REGION_NAME],\n      dataIndex: REGION_NAME,\n      key: REGION_NAME,\n      render: (value) => value,\n      fixed: \"left\",\n    },\n    {\n      title: REGION_RECORD_COLUMN[REGION_COORDINATES],\n      dataIndex: REGION_COORDINATES,\n      key: REGION_COORDINATES,\n      render: (value) => value,\n      ellipsis: true,\n      width: 200,\n    },\n    {\n      title: REGION_RECORD_COLUMN[REGION_ENERGY_CONSUMPTION],\n      dataIndex: REGION_ENERGY_CONSUMPTION,\n      key: REGION_ENERGY_CONSUMPTION,\n      render: (value) => formatterValueToLocaleString({ value, divide: 1 }),\n      sorter: (a, b) =>\n        b[REGION_ENERGY_CONSUMPTION] - a[REGION_ENERGY_CONSUMPTION],\n      sortDirections: [\"ascend\", \"descend\"],\n      defaultSortOrder: \"descend\",\n    },\n    {\n      title: REGION_RECORD_COLUMN[REGION_ENERGY_DENSITY_CONSUMPTION],\n      dataIndex: REGION_ENERGY_DENSITY_CONSUMPTION,\n      key: REGION_ENERGY_DENSITY_CONSUMPTION,\n      render: (value) => value,\n    },\n    {\n      title: REGION_RECORD_COLUMN[REGION_OPEN_TICKETS],\n      dataIndex: REGION_OPEN_TICKETS,\n      key: REGION_OPEN_TICKETS,\n      render: (value) => value,\n    },\n    {\n      title: REGION_RECORD_COLUMN[REGION_ALERT_TICKETS],\n      dataIndex: REGION_ALERT_TICKETS,\n      key: REGION_ALERT_TICKETS,\n      render: (value) => value,\n    },\n    {\n      title: REGION_RECORD_COLUMN[REGION_BUILDINGS],\n      dataIndex: REGION_BUILDINGS,\n      key: REGION_BUILDINGS,\n      render: (value) => value,\n    },\n    {\n      title: REGION_RECORD_COLUMN[REGION_FLOOR_AREA],\n      dataIndex: REGION_FLOOR_AREA,\n      key: REGION_FLOOR_AREA,\n      render: (value) => value,\n    },\n  ];\n  return (\n    <>\n      <Space className=\"mb-5\">\n        <Button\n          className=\"flex items-center\"\n          type=\"primary\"\n          icon={<PlusOutlined />}\n          disabled\n        >\n          Add\n        </Button>\n        <Button\n          type=\"primary\"\n          icon={<PlusOutlined />}\n          onClick={() => mutationAutoGenerateRegion.mutate()}\n          loading={mutationAutoGenerateRegion.isLoading}\n          className=\"flex items-center\"\n        >\n          Auto fill\n        </Button>\n      </Space>\n      <Table\n        dataSource={dataSource.map((r) => ({ ...r, key: r.id }))}\n        columns={columns}\n        loading={isLoading}\n        scroll={{ x: 1150 }}\n        hasOperationColumn\n        onEditRecord={(_, record) =>\n          setModalOperationRegion({\n            isVisible: true,\n            isCreate: false,\n            region: record,\n          })\n        }\n        onRemoveRecord={(_, record) => {\n          const key = [\"region-details\", record.regionname, country];\n          queryClient.setQueryData(key, (res: RegionResponse | any) => ({\n            ...res,\n            data: undefined,\n          }));\n          mutationDeleteRegion.mutate(record.id);\n        }}\n      />\n      <ConfigurationModalOperationRegion />\n    </>\n  );\n};\nexport default React.memo(ConfigurationRegion);\n","import Region from \"./Region\";\n\nexport { default as ModalOperationRegion } from \"./Region.Modal\";\nexport { default as FormOperationRegion } from \"./Region.FormOperation\";\nexport { default as regionStyle } from \"./Region.styles.module.scss\";\n\nexport default Region;\n","import {\n  REGION_ENERGY_CONSUMPTION,\n  EnergyConsumptionUnit,\n} from \"pages/hierachy_map\";\nimport { createStore } from \"zustand-store\";\nimport { ModalOperationEnergyRanking } from \"./EnergyRanking.typings\";\n\ntype IState = {\n  modalOperationEnergyRanking: ModalOperationEnergyRanking;\n};\n\ninterface IActions {\n  setModalOperationEnergyRanking: (\n    modalData: ModalOperationEnergyRanking\n  ) => any;\n  resetStore: () => any;\n}\n\nconst initialState = {\n  units: {\n    [REGION_ENERGY_CONSUMPTION]: \"baseWatt\" as EnergyConsumptionUnit,\n  },\n  modalOperationEnergyRanking: {\n    isVisible: false,\n    isCreate: false,\n    resource: undefined,\n  },\n};\n\nexport const [useEnergyRankingConfiguration, { getState, destroy }] =\n  createStore<IState & IActions>(\n    (set, get) => ({\n      ...initialState,\n      setModalOperationEnergyRanking: (modalOperationEnergyRanking) => {\n        const { isVisible } = modalOperationEnergyRanking;\n        if (isVisible) {\n          set({\n            modalOperationEnergyRanking: {\n              ...get().modalOperationEnergyRanking,\n              ...modalOperationEnergyRanking,\n            },\n          });\n        } else {\n          set({\n            modalOperationEnergyRanking: {\n              ...initialState.modalOperationEnergyRanking,\n            },\n          });\n        }\n      },\n      resetStore: () => set({ ...initialState }),\n    }),\n    \"ConfigurationStore\"\n  );\n","import React from \"react\";\nimport { Form, Input } from \"antd\";\nimport { useValidatorInputNumber } from \"components/antd/Input\";\nimport { FormType } from \"components/antd/Form\";\nimport {\n  ENERGY_RANKING_RECORD_COLUMN,\n  ENERGY_RANKING_BUILDING_NAME,\n  ENERGY_RANKING_ENERGY,\n  ENERGY_RANKING_ENERGY_DENSITY,\n} from \"pages/hierachy_map\";\nimport styles from \"pages/configuration_hierachy_data/components/Region/Region.styles.module.scss\";\nimport { useEnergyRankingConfiguration } from \"./EnergyRanking.zustand\";\n\nconst FormOperationRegion: React.FC<{\n  form: FormType;\n}> = ({ form: { formFields: fields, setFormFields: setFields } }) => {\n  const [form] = Form.useForm();\n  const {\n    modalOperationEnergyRanking: { isCreate },\n  } = useEnergyRankingConfiguration();\n  const { validator: validatorInputNumber } = useValidatorInputNumber();\n  return (\n    <Form\n      form={form}\n      name=\"form-operation-geojson\"\n      fields={fields}\n      onFieldsChange={(_, allFields) => setFields(allFields)}\n      className={`form-operation-region ${styles.formOperationRegion}`}\n    >\n      <Form.Item\n        label={ENERGY_RANKING_RECORD_COLUMN[ENERGY_RANKING_BUILDING_NAME]}\n        name={ENERGY_RANKING_BUILDING_NAME}\n      >\n        <Input disabled={!isCreate} />\n      </Form.Item>\n      <Form.Item\n        label={ENERGY_RANKING_RECORD_COLUMN[ENERGY_RANKING_ENERGY]}\n        name={ENERGY_RANKING_ENERGY}\n        rules={validatorInputNumber}\n      >\n        <Input className=\"ant-input-number\" />\n      </Form.Item>\n      <Form.Item\n        label={ENERGY_RANKING_RECORD_COLUMN[ENERGY_RANKING_ENERGY_DENSITY]}\n        name={ENERGY_RANKING_ENERGY_DENSITY}\n        rules={validatorInputNumber}\n      >\n        <Input className=\"ant-input-number\" />\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default React.memo(FormOperationRegion);\n","import React from \"react\";\nimport {\n  ENERGY_RANKING_BUILDING_NAME,\n  ENERGY_RANKING_ENERGY,\n  ENERGY_RANKING_ENERGY_DENSITY,\n  useMutationOperationEnergyRanking,\n  useSelectedCountry,\n} from \"pages/hierachy_map\";\nimport { useOperationFormControlled } from \"components/antd/Form\";\nimport { ModalControl } from \"components/antd/Modal\";\nimport { useEnergyRankingConfiguration } from \"./EnergyRanking.zustand\";\nimport ConfigurationFormOperationEnergyRanking from \"./EnergyRanking.FormOperation\";\n\nconst ModalOperationEnergyRanking = () => {\n  const {\n    country: { country },\n  } = useSelectedCountry();\n  const {\n    modalOperationEnergyRanking: { isCreate, resource, isVisible },\n    setModalOperationEnergyRanking,\n  } = useEnergyRankingConfiguration();\n  const mutation = useMutationOperationEnergyRanking(country);\n  const form = useOperationFormControlled(\n    [\n      { name: ENERGY_RANKING_BUILDING_NAME, value: \"\" },\n      { name: ENERGY_RANKING_ENERGY, value: \"\" },\n      { name: ENERGY_RANKING_ENERGY_DENSITY, value: \"\" },\n    ],\n    resource\n  );\n  const { disabled, getFieldsValue } = form;\n  const handleOperationRegion = React.useCallback(async () => {\n    try {\n      if (disabled) {\n        return;\n      }\n      const formFields = getFieldsValue();\n      await mutation.mutateAsync({\n        buildingname: formFields[ENERGY_RANKING_BUILDING_NAME],\n        info: {\n          [ENERGY_RANKING_ENERGY]: formFields[ENERGY_RANKING_ENERGY],\n          [ENERGY_RANKING_ENERGY_DENSITY]:\n            formFields[ENERGY_RANKING_ENERGY_DENSITY],\n        },\n      });\n    } catch (error) {\n      //\n    }\n  }, [form]);\n  return (\n    <ModalControl\n      title=\"Form\"\n      visible={isVisible}\n      onCancel={() =>\n        setModalOperationEnergyRanking({ isVisible: false, isCreate })\n      }\n      okButtonProps={{ disabled }}\n      onOk={async () => {\n        await handleOperationRegion();\n        setModalOperationEnergyRanking({ isVisible: false, isCreate });\n      }}\n      confirmLoading={mutation.isLoading}\n      destroyOnClose\n    >\n      <ConfigurationFormOperationEnergyRanking form={form} />\n    </ModalControl>\n  );\n};\n\nexport default React.memo(ModalOperationEnergyRanking);\n","import React from \"react\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport Table from \"components/antd/Table\";\nimport {\n  EnergyRanking,\n  ENERGY_RANKING_BUILDING_NAME,\n  ENERGY_RANKING_ENERGY,\n  ENERGY_RANKING_ENERGY_DENSITY,\n  ENERGY_RANKING_RECORD_COLUMN,\n  formatterValueToLocaleString,\n  useMutationDeleteEnergyRanking,\n  useQueryEnergyRanking,\n  useSelectedCountry,\n} from \"pages/hierachy_map\";\nimport { Button } from \"antd\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useEnergyRankingConfiguration } from \"./EnergyRanking.zustand\";\nimport ModalOperationEnergyRanking from \"./EnergyRanking.Modal\";\n\nconst TableEnergyRanking = React.memo(() => {\n  const {\n    country: { country },\n  } = useSelectedCountry();\n  const queryClient = useQueryClient();\n  const { setModalOperationEnergyRanking } = useEnergyRankingConfiguration();\n  const { data: dataSource = [], isLoading } = useQueryEnergyRanking(country);\n  const mutationDelete = useMutationDeleteEnergyRanking(country);\n  const columns: ColumnsType<EnergyRanking> = [\n    {\n      title: ENERGY_RANKING_RECORD_COLUMN[ENERGY_RANKING_BUILDING_NAME],\n      dataIndex: ENERGY_RANKING_BUILDING_NAME,\n      key: ENERGY_RANKING_BUILDING_NAME,\n    },\n    {\n      title: ENERGY_RANKING_RECORD_COLUMN[ENERGY_RANKING_ENERGY],\n      dataIndex: ENERGY_RANKING_ENERGY,\n      key: ENERGY_RANKING_ENERGY,\n      render: (value) => formatterValueToLocaleString({ value, divide: 1 }),\n      sorter: (a, b) => b[ENERGY_RANKING_ENERGY] - a[ENERGY_RANKING_ENERGY],\n      sortDirections: [\"ascend\", \"descend\"],\n      defaultSortOrder: \"descend\",\n    },\n    {\n      title: ENERGY_RANKING_RECORD_COLUMN[ENERGY_RANKING_ENERGY_DENSITY],\n      dataIndex: ENERGY_RANKING_ENERGY_DENSITY,\n      key: ENERGY_RANKING_ENERGY_DENSITY,\n      render: (value) => formatterValueToLocaleString({ value, divide: 1 }),\n      sorter: (a, b) =>\n        b[ENERGY_RANKING_ENERGY_DENSITY] - a[ENERGY_RANKING_ENERGY_DENSITY],\n      sortDirections: [\"ascend\", \"descend\"],\n      defaultSortOrder: \"descend\",\n    },\n  ];\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        onClick={() =>\n          setModalOperationEnergyRanking({ isVisible: true, isCreate: true })\n        }\n        className=\"mb-3\"\n      >\n        New Record\n      </Button>\n      <Table\n        dataSource={dataSource.map((r) => ({ ...r, key: r.id }))}\n        columns={columns}\n        loading={isLoading}\n        hasOperationColumn\n        onEditRecord={(_, record) =>\n          setModalOperationEnergyRanking({\n            isVisible: true,\n            resource: record,\n            isCreate: false,\n          })\n        }\n        onRemoveRecord={(_, record) => {\n          const key = [`energy-ranking-${country}`];\n          queryClient.setQueryData(\n            key,\n            (data: any) =>\n              data && data.filter((i: EnergyRanking) => i.id !== record.id)\n          );\n          mutationDelete.mutate(record.id);\n        }}\n      />\n      <ModalOperationEnergyRanking />\n    </>\n  );\n});\n\nexport default React.memo(TableEnergyRanking);\n","import EnergyRanking from \"./EnergyRanking\";\n\nexport default EnergyRanking;\n","import { createStore } from \"zustand-store\";\nimport { ModalOperation } from \"./AlertsAndTickets.typings\";\n\ntype IState = {\n  modalOperation: ModalOperation;\n};\n\ninterface IActions {\n  setModalOperation: (modalData: ModalOperation) => any;\n}\n\nconst initialState = {\n  modalOperation: {\n    isVisible: false,\n    isCreate: false,\n    resource: undefined,\n  },\n};\n\nexport const [useAlertsAndTicketsStore, { getState, destroy }] = createStore<\n  IState & IActions\n>(\n  (set, get) => ({\n    ...initialState,\n    setModalOperation: (modalOperation) => {\n      const { isVisible } = modalOperation;\n      if (isVisible) {\n        set({\n          modalOperation: {\n            ...get().modalOperation,\n            ...modalOperation,\n          },\n        });\n      } else {\n        set({\n          modalOperation: {\n            ...initialState.modalOperation,\n          },\n        });\n      }\n    },\n  }),\n  \"AlertsAndTicketsConfigurationStore\"\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"formOperation\":\"AlertsAndTickets_styles_formOperation__tgurG\"};","import React from \"react\";\nimport { Col, Form, Input, Row } from \"antd\";\nimport {\n  useValidatorInput,\n  useValidatorInputNumber,\n} from \"components/antd/Input\";\nimport { FormType } from \"components/antd/Form\";\nimport {\n  ALERTS,\n  TICKETS,\n  ALERT_AND_TICKETS_RECORD_COLUMN,\n  ALERTS_DISPLAY_NAME,\n  DISPLAY_NAME,\n  TICKETS_DISPLAY_NAME,\n} from \"pages/hierachy_map\";\nimport styles from \"./AlertsAndTickets.styles.module.scss\";\n\nconst FormOperationRegion: React.FC<{\n  form: FormType;\n}> = ({ form: { formFields: fields, setFormFields: setFields } }) => {\n  const [form] = Form.useForm();\n  const { validator: validatorInputNumber } = useValidatorInputNumber();\n  const { validator: validatorInput } = useValidatorInput();\n  return (\n    <Form\n      form={form}\n      name=\"form-operation-geojson\"\n      fields={fields}\n      onFieldsChange={(_, allFields) => setFields(allFields)}\n      className={`form-operation-region ${styles.formOperation}`}\n    >\n      <Row gutter={16 + 8 * 2}>\n        <Col span={12}>\n          <Form.Item\n            label={ALERT_AND_TICKETS_RECORD_COLUMN[ALERTS]}\n            name={ALERTS}\n            rules={validatorInputNumber}\n          >\n            <Input className=\"ant-input-number\" />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label={ALERT_AND_TICKETS_RECORD_COLUMN[DISPLAY_NAME]}\n            name={ALERTS_DISPLAY_NAME}\n            rules={validatorInput}\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n      </Row>\n      <Row gutter={16 + 8 * 2}>\n        <Col span={12}>\n          <Form.Item\n            label={ALERT_AND_TICKETS_RECORD_COLUMN[TICKETS]}\n            name={TICKETS}\n            rules={validatorInputNumber}\n          >\n            <Input className=\"ant-input-number\" />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label={ALERT_AND_TICKETS_RECORD_COLUMN[DISPLAY_NAME]}\n            name={TICKETS_DISPLAY_NAME}\n            rules={validatorInput}\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default React.memo(FormOperationRegion);\n","import React from \"react\";\nimport {\n  ALERTS,\n  ALERTS_DISPLAY_NAME,\n  TICKETS,\n  TICKETS_DISPLAY_NAME,\n  useMutationAlertsAndTickets,\n  useSelectedCountry,\n} from \"pages/hierachy_map\";\nimport { useOperationFormControlled } from \"components/antd/Form\";\nimport { ModalControl } from \"components/antd/Modal\";\nimport { useAlertsAndTicketsStore } from \"./AlertsAndTickets.zustand\";\nimport ConfigurationFormOperationEnergyRanking from \"./AlertsAndTickets.FormOperation\";\n\nconst ModalOperation = () => {\n  const {\n    country: { country },\n  } = useSelectedCountry();\n  const {\n    modalOperation: { isCreate, resource, isVisible },\n    setModalOperation,\n  } = useAlertsAndTicketsStore();\n  const mutation = useMutationAlertsAndTickets(country);\n  const form = useOperationFormControlled(\n    [\n      { name: ALERTS, value: \"\" },\n      { name: TICKETS, value: \"\" },\n      { name: ALERTS_DISPLAY_NAME, value: \"\" },\n      { name: TICKETS_DISPLAY_NAME, value: \"\" },\n    ],\n    resource\n  );\n  const { disabled, getFieldsValue } = form;\n  const handleOperationRegion = React.useCallback(async () => {\n    try {\n      if (disabled) {\n        return;\n      }\n      const formFields = getFieldsValue();\n      await mutation.mutateAsync({\n        [ALERTS]: formFields[ALERTS],\n        [ALERTS_DISPLAY_NAME]: formFields[ALERTS_DISPLAY_NAME],\n        [TICKETS]: formFields[TICKETS],\n        [TICKETS_DISPLAY_NAME]: formFields[TICKETS_DISPLAY_NAME],\n      });\n    } catch (error) {\n      //\n    }\n  }, [form]);\n  return (\n    <ModalControl\n      title=\"Form\"\n      visible={isVisible}\n      onCancel={() => setModalOperation({ isVisible: false, isCreate })}\n      okButtonProps={{ disabled }}\n      onOk={async () => {\n        await handleOperationRegion();\n        setModalOperation({ isVisible: false, isCreate });\n      }}\n      confirmLoading={mutation.isLoading}\n      destroyOnClose\n    >\n      <ConfigurationFormOperationEnergyRanking form={form} />\n    </ModalControl>\n  );\n};\n\nexport default React.memo(ModalOperation);\n","import { Button, Card, Col, Row, Statistic } from \"antd\";\nimport {\n  useQueryAlertsAndTicketsData,\n  useSelectedCountry,\n} from \"pages/hierachy_map\";\nimport React from \"react\";\nimport { useAlertsAndTicketsStore } from \"./AlertsAndTickets.zustand\";\nimport ModalOperation from \"./AlertsAndTickets.Modal\";\n\nconst AlertsAndTickets = () => {\n  const {\n    country: { country },\n  } = useSelectedCountry();\n  const {\n    alertsFormatted,\n    ticketsFormatted,\n    alertsDisplayName,\n    ticketsDisplayName,\n    resource,\n  } = useQueryAlertsAndTicketsData(country);\n  const { setModalOperation } = useAlertsAndTicketsStore();\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        className=\"mb-3\"\n        onClick={() =>\n          setModalOperation({ isVisible: true, resource, isCreate: !!resource })\n        }\n      >\n        Operation\n      </Button>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Card>\n            <Statistic\n              title={alertsDisplayName}\n              className=\"truncate\"\n              value={alertsFormatted}\n            />\n          </Card>\n        </Col>\n        <Col span={12}>\n          <Card>\n            <Statistic\n              title={ticketsDisplayName}\n              className=\"truncate\"\n              value={ticketsFormatted}\n            />\n          </Card>\n        </Col>\n      </Row>\n      <ModalOperation />\n    </>\n  );\n};\n\nexport default React.memo(AlertsAndTickets);\n","import AlertsAndTickets from \"./AlertsAndTickets\";\n\nexport default AlertsAndTickets;\n","import React from \"react\";\nimport { Divider } from \"antd\";\nimport TableEnergyRanking from \"pages/configuration_hierachy_data/components/EnergyRanking\";\nimport AlertsAndTickets from \"pages/configuration_hierachy_data/components/AlertsAndTickets\";\n\nconst ConfigurationDataResource = () => (\n  <>\n    <AlertsAndTickets />\n    <Divider plain />\n    <TableEnergyRanking />\n  </>\n);\n\nexport default React.memo(ConfigurationDataResource);\n","import React from \"react\";\nimport { Row, Col, Popconfirm, Tooltip } from \"antd\";\nimport Tabs, { ITabPane } from \"components/antd/Tabs\";\nimport {\n  Country,\n  useCountryStatusList,\n  useMutationDeleteCountry,\n  useMapStore,\n} from \"pages/hierachy_map\";\nimport { DataNode } from \"antd/lib/tree\";\nimport Tree from \"components/antd/Tree\";\nimport { CheckCircleOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport GeoInfo, { GeoInfoDragger } from \"./components/GeoInfo\";\nimport Region from \"./components/Region\";\nimport ConfigurationDataResource from \"./components/DataResource\";\n\nconst TreeCountryList = React.memo(() => {\n  const { data: countries = [] } = useCountryStatusList();\n  const mutationDeleteCountry = useMutationDeleteCountry();\n  const { country: activedCountryId, actionSetSelectedCountry } = useMapStore();\n  const treeData: DataNode[] = React.useMemo(\n    () =>\n      countries?.map((c: Country) => {\n        const { id, country } = c;\n        return {\n          title: country,\n          key: id,\n        };\n      }) || [],\n    [countries]\n  );\n  const handleRenderTitle = React.useCallback(\n    (node: DataNode) => {\n      const isSelected = node.key === activedCountryId;\n      const isActived = countries.find((c) => c.id === node.key)?.actived;\n      return (\n        <div\n          key={node.key}\n          className={`ant-tree-title-container grid gap-2 items-center h-8 px-2 ${\n            isSelected ? \"bg-primary-1000\" : \"transparent\"\n          }`}\n          style={{ gridTemplateColumns: `2fr 24px 24px` }}\n        >\n          <div\n            className={`ant-tree-title-text cursor-pointer truncate text-sm ${\n              isSelected ? \"text-white font-medium\" : \"text-gray-400\"\n            }`}\n          >\n            {node.title as React.ReactNode}\n          </div>\n          {isActived ? (\n            <Tooltip title=\"Country actived\">\n              <CheckCircleOutlined />\n            </Tooltip>\n          ) : (\n            <span />\n          )}\n          <Popconfirm\n            title=\"Are you sure to delete this item?\"\n            onConfirm={() => mutationDeleteCountry.mutate(node.key as number)}\n            okText=\"Yes\"\n            cancelText=\"No\"\n            okButtonProps={{ loading: mutationDeleteCountry.isLoading }}\n          >\n            <DeleteOutlined />\n          </Popconfirm>\n        </div>\n      );\n    },\n    [activedCountryId, mutationDeleteCountry, countries]\n  );\n  return (\n    <Tree\n      treeData={treeData}\n      onSelectKey={(keys) => {\n        const countryId = keys[0] as number;\n        actionSetSelectedCountry(countryId);\n      }}\n      titleRender={handleRenderTitle}\n    />\n  );\n});\n\nconst AntdConfiguration = () => {\n  const tabPanes: ITabPane[] = React.useMemo(\n    () => [\n      {\n        tab: \"Geometry\",\n        key: \"geometry\",\n        children: <GeoInfo />,\n      },\n      {\n        tab: \"Region\",\n        key: \"region\",\n        children: <Region />,\n      },\n      {\n        tab: \"Data resource\",\n        key: \"data_resource\",\n        children: <ConfigurationDataResource />,\n      },\n    ],\n    []\n  );\n\n  return (\n    <div>\n      <GeoInfoDragger isCreate />\n      <Row className=\"mt-5\">\n        <Col span={6} className=\"p-3 bg-primary-900 min-h-[600px] h-auto\">\n          <TreeCountryList />\n        </Col>\n        <Col span={18} className=\"pl-5\">\n          <Tabs tabPanes={tabPanes} />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default React.memo(AntdConfiguration);\n"],"names":["useReaderFile","handleValidateAcceptType","React","file","accept","type","match","readData","files","callbackSetData","callbackHandleError","reader","FileReader","addEventListener","result","jsonString","isJSONString","JSON","stringify","d3","removeEventListener","readAsText","error","useI18n","key","localization","TabPane","Tabs","AntdTabs","tabPanes","onChangeTab","undefined","rest","tabSelected","setTabSelected","onChange","defaultActiveKey","activeKey","destroyInactiveTabPane","map","tab","children","restTabPane","isSelected","className","TitleRender","keys","node","title","AntdTree","onSelectKey","treeData","setSelectedKeys","defaultExpandAll","onSelect","selectedKeys","length","titleRender","switcherIcon","CaretDownFilled","defaultSelectedKeys","useOperationFormControlled","fields","initialValues","formFields","setFormFields","field","name","value","form","getFormFields","property","reduce","prev","curr","newPrev","getFieldsValue","disabled","some","errors","getFieldValue","fieldName","getFieldError","getFieldsError","DraggerForm","isCreate","setFields","setGeojsonCountry","Form","onFieldsChange","_","allFields","styles","label","GEOJSON_INFO_RECORD_COLUMN","GEOJSON_INFO_COUNTRY","rules","required","message","GEOJSON_INFO_DATA","valuePropName","getValueFromEvent","info","fileList","beforeUpload","jsonData","jsonParse","parse","Upload","multiple","maxCount","InboxOutlined","GeoInfoDragger","isVisible","setVisibleModal","mutation","useMutationOperationGeojsonMapOfACountry","defaultCountry","useSelectedCountry","country","geojsonCountry","handleCreateGeojsonMapOfACountry","mutateAsync","icon","PlusOutlined","UploadOutlined","onClick","Modal","visible","onCancel","okButtonProps","onOk","confirmLoading","isLoading","GeoInfo","useGeojsonRegions","geojsonRegions","actived","id","mutateUpdateActiveCountry","useMutationUpdateActiveCountry","loading","mutate","CheckCircleOutlined","D3Hierachy","data","hierachy","width","height","classNameContainer","AntdTable","props","dataSource","columns","onEditRecord","onRemoveRecord","hasOperationColumn","columnsWithOperation","render","renderProps","EditOutlined","onConfirm","DeleteOutlined","fixed","handleShowTotal","total","handleRenderPaginationItem","page","RightOutlined","LeftOutlined","size","pagination","position","showTotal","itemRender","defaultProps","initialState","modalOperationRegion","region","units","REGION_ENERGY_CONSUMPTION","createStore","set","get","setModalOperationRegion","setUnitsOperationRegion","resetStore","useConfigurationRegion","useUnitsOperationRegion","getState","destroy","selectedUnit","validNumber","validator","rule","valToNumber","toNumber","isNaN","Promise","reject","resolve","positiveNumber","useValidatorInputNumber","t","Option","Select","FormOperationRegion","isUpdated","validatorInputNumber","ecUnit","setEcUnit","ec","ecConverted","convertECByUnit","unit","REGION_RECORD_COLUMN","REGION_NAME","defaultValue","formatterValueToLocaleString","divide","EC_UNITS","Object","entries","REGION_ENERGY_DENSITY_CONSUMPTION","REGION_OPEN_TICKETS","REGION_ALERT_TICKETS","REGION_BUILDINGS","REGION_FLOOR_AREA","OperationRegion","mutationUpdateRegion","useMutationOperationRegion","handleOperationRegion","energyConsumption","destroyOnClose","ConfigurationRegion","queryClient","useQueryClient","useRegionListData","regionList","mutationAutoGenerateRegion","useMutationAutoGenerateRegion","mutationDeleteRegion","useMutationDeleteRegion","dataIndex","REGION_COORDINATES","ellipsis","sorter","a","b","sortDirections","defaultSortOrder","r","scroll","x","record","regionname","setQueryData","res","modalOperationEnergyRanking","resource","setModalOperationEnergyRanking","useEnergyRankingConfiguration","ENERGY_RANKING_RECORD_COLUMN","ENERGY_RANKING_BUILDING_NAME","ENERGY_RANKING_ENERGY","ENERGY_RANKING_ENERGY_DENSITY","ModalOperationEnergyRanking","useMutationOperationEnergyRanking","buildingname","TableEnergyRanking","useQueryEnergyRanking","mutationDelete","useMutationDeleteEnergyRanking","filter","i","modalOperation","setModalOperation","useAlertsAndTicketsStore","validatorInput","useValidatorInput","gutter","span","ALERT_AND_TICKETS_RECORD_COLUMN","ALERTS","DISPLAY_NAME","ALERTS_DISPLAY_NAME","TICKETS","TICKETS_DISPLAY_NAME","ModalOperation","useMutationAlertsAndTickets","AlertsAndTickets","useQueryAlertsAndTicketsData","alertsFormatted","ticketsFormatted","alertsDisplayName","ticketsDisplayName","ConfigurationDataResource","plain","TreeCountryList","useCountryStatusList","countries","mutationDeleteCountry","useMutationDeleteCountry","useMapStore","activedCountryId","actionSetSelectedCountry","c","handleRenderTitle","isActived","find","style","gridTemplateColumns","okText","cancelText","countryId","AntdConfiguration"],"sourceRoot":""}
{"version":3,"file":"static/js/862.171487aa.chunk.js","mappings":"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","sources":["components/charts/D3Chart/D3Chart.tsx","components/charts/D3Chart/index.ts","../node_modules/d3-hexbin/src/hexbin.js","components/charts/D3Hexbin/D3Hexbin.utils.ts","components/charts/D3Hexbin/index.ts","components/charts/D3Hexbin/D3Hexbin.tsx","components/core/Loading/index.tsx","hooks/useWindowDimensions.ts","pages/hexbin_chart/index.tsx"],"sourcesContent":["import classNames from \"classnames\";\nimport Loading from \"components/core/Loading\";\nimport React from \"react\";\n\nexport interface IBaseD3ChartProps {\n  chartName?: string;\n  isLoading?: boolean;\n  classNameContainer?: string | any;\n  classNameSVGChart?: string | any;\n  children?: React.ReactNode | React.ReactElement | any;\n}\n\nexport interface IRefD3ChartProps {\n  ref: React.MutableRefObject<HTMLDivElement | any> | any;\n  refSVG: React.MutableRefObject<SVGSVGElement | any> | any;\n}\n\nconst D3Chart = React.forwardRef(\n  (props: IBaseD3ChartProps, { ref, refSVG }: IRefD3ChartProps | any) => {\n    const {\n      chartName,\n      isLoading,\n      classNameContainer,\n      classNameSVGChart,\n      children,\n    } = props;\n    return (\n      <div ref={ref} className={`relative ${classNames(classNameContainer)}`}>\n        {chartName && (\n          <div className=\"text-center mb-5 text-xl font-medium\">\n            {chartName}\n          </div>\n        )}\n        {isLoading && <Loading />}\n        {refSVG && (\n          <svg ref={refSVG} className={`m-auto ${classNameSVGChart}`} />\n        )}\n        {children && children}\n      </div>\n    );\n  }\n);\n\nD3Chart.defaultProps = {\n  chartName: \"\",\n  isLoading: false,\n  classNameContainer: \"\",\n  classNameSVGChart: \"\",\n  children: null,\n};\n\nexport default D3Chart;\n","import D3Chart from \"./D3Chart\";\n\nexport * from \"./D3Chart\";\n\nexport default D3Chart;\n","var thirdPi = Math.PI / 3,\n    angles = [0, thirdPi, 2 * thirdPi, 3 * thirdPi, 4 * thirdPi, 5 * thirdPi];\n\nfunction pointX(d) {\n  return d[0];\n}\n\nfunction pointY(d) {\n  return d[1];\n}\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 1,\n      y1 = 1,\n      x = pointX,\n      y = pointY,\n      r,\n      dx,\n      dy;\n\n  function hexbin(points) {\n    var binsById = {}, bins = [], i, n = points.length;\n\n    for (i = 0; i < n; ++i) {\n      if (isNaN(px = +x.call(null, point = points[i], i, points))\n          || isNaN(py = +y.call(null, point, i, points))) continue;\n\n      var point,\n          px,\n          py,\n          pj = Math.round(py = py / dy),\n          pi = Math.round(px = px / dx - (pj & 1) / 2),\n          py1 = py - pj;\n\n      if (Math.abs(py1) * 3 > 1) {\n        var px1 = px - pi,\n            pi2 = pi + (px < pi ? -1 : 1) / 2,\n            pj2 = pj + (py < pj ? -1 : 1),\n            px2 = px - pi2,\n            py2 = py - pj2;\n        if (px1 * px1 + py1 * py1 > px2 * px2 + py2 * py2) pi = pi2 + (pj & 1 ? 1 : -1) / 2, pj = pj2;\n      }\n\n      var id = pi + \"-\" + pj, bin = binsById[id];\n      if (bin) bin.push(point);\n      else {\n        bins.push(bin = binsById[id] = [point]);\n        bin.x = (pi + (pj & 1) / 2) * dx;\n        bin.y = pj * dy;\n      }\n    }\n\n    return bins;\n  }\n\n  function hexagon(radius) {\n    var x0 = 0, y0 = 0;\n    return angles.map(function(angle) {\n      var x1 = Math.sin(angle) * radius,\n          y1 = -Math.cos(angle) * radius,\n          dx = x1 - x0,\n          dy = y1 - y0;\n      x0 = x1, y0 = y1;\n      return [dx, dy];\n    });\n  }\n\n  hexbin.hexagon = function(radius) {\n    return \"m\" + hexagon(radius == null ? r : +radius).join(\"l\") + \"z\";\n  };\n\n  hexbin.centers = function() {\n    var centers = [],\n        j = Math.round(y0 / dy),\n        i = Math.round(x0 / dx);\n    for (var y = j * dy; y < y1 + r; y += dy, ++j) {\n      for (var x = i * dx + (j & 1) * dx / 2; x < x1 + dx / 2; x += dx) {\n        centers.push([x, y]);\n      }\n    }\n    return centers;\n  };\n\n  hexbin.mesh = function() {\n    var fragment = hexagon(r).slice(0, 4).join(\"l\");\n    return hexbin.centers().map(function(p) { return \"M\" + p + \"m\" + fragment; }).join(\"\");\n  };\n\n  hexbin.x = function(_) {\n    return arguments.length ? (x = _, hexbin) : x;\n  };\n\n  hexbin.y = function(_) {\n    return arguments.length ? (y = _, hexbin) : y;\n  };\n\n  hexbin.radius = function(_) {\n    return arguments.length ? (r = +_, dx = r * 2 * Math.sin(thirdPi), dy = r * 1.5, hexbin) : r;\n  };\n\n  hexbin.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], hexbin) : [x1 - x0, y1 - y0];\n  };\n\n  hexbin.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], hexbin) : [[x0, y0], [x1, y1]];\n  };\n\n  return hexbin.radius(1);\n}\n","import * as d3 from \"d3\";\nimport * as d3Hexbin from \"d3-hexbin\";\nimport { HexbinPoints } from \"./D3Hexbin.typings\";\n\n/**\n * createHexbinChart this function use for generator  / draw map from geojson object (which contains spherical polygons) -> 2D (planar points)\n * @param points - [number, number][] coordinates points in spherical (3D maps). We can go to google maps an pick any point with [longitude, latitude]\n * @param options -\n *+ width: number;  width of map\n  + height: number; height of map\n  + projection: d3.GeoConicProjection | d3.GeoStreamWrapper | null | any;  Projections transform spherical polygonal geometry to planar polygonal geometry. D3 provides implementations of several classes of standard projections: - https://github.com/d3/d3-geo-projection\n  + data: geojson objection (should topojson - TopoJSON is an extension of GeoJSON that encodes topology.); https://github.com/topojson/topojson\n * @svg - svg element\n */\nexport const createHexbinChart = async ({\n  points,\n  geojson,\n  width = 800,\n  height = 640,\n  svg,\n}: {\n  points: HexbinPoints;\n  geojson: d3.GeoPermissibleObjects | any;\n  width?: number;\n  height?: number;\n  svg: SVGSVGElement;\n  container: HTMLDivElement;\n}) => {\n  try {\n    const $svg = d3\n      .select(svg)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewbox\", `0,0,${width},${height}`);\n    $svg.html(\"\");\n    // draw map\n    const centroid = d3.geoPath().centroid(geojson);\n    const projection = d3 // https://github.com/d3/d3-geo#projections\n      .geoMercator()\n      .scale(1 / (2 * Math.PI))\n      .translate(centroid)\n      .fitSize([width, height], geojson);\n    const render = d3.geoPath(projection); // https://github.com/d3/d3-geo#paths\n    // Generator map from project + geojson data: https://github.com/d3/d3-geo#geoPath\n    // NOTE: every map will has difference projection (scale, center, translate, v...v). We need research source from google to make sure it can be work\n    geojson.features.forEach((item: any) =>\n      $svg\n        .append(\"path\")\n        .datum(item)\n        .attr(\"class\", \"geometry-map\")\n        .attr(\"pointer-events\", \"visible\")\n        .attr(\"stroke\", \"#777\")\n        .attr(\"stroke-width\", 0.5)\n        .attr(\"stroke-linejoin\", \"round\")\n        .attr(\"cursor\", \"pointer\")\n        .attr(\"fill\", \"none\")\n        .attr(\"d\", (d: any) => render(d))\n    );\n\n    // Reformat the data: d3.hexbin() needs a specific format\n    // Prepare a color palette\n    const color = d3.scaleOrdinal(points, d3.schemeTableau10);\n    // init hexbin instance\n    const hexbin = d3Hexbin\n      .hexbin()\n      .extent([\n        [0, 0],\n        [width, height],\n      ])\n      .radius(9);\n    // projection points - transform spherical polygonal geometry to planar polygonal geometry\n    // meaning after we use d3.geoPath to generate map 2D -> we need use projection to project points 3D -> points 2D and mapping to our map\n    const hexbinPoints = points.map((point) => projection(point)) as [\n      number,\n      number\n    ][];\n    $svg\n      .append(\"g\")\n      .attr(\"class\", \"hexagon-data\")\n      .selectAll(\"path\")\n      // data hexbin points -> use d3.hexbin to generate hexagonal, Bins the specified array of points, returning an array of hexagonal bins.\n      .data(hexbin(hexbinPoints))\n      .enter()\n      .append(\"path\")\n      .attr(\"transform\", (d) => `translate(${d.x},${d.y})`)\n      .attr(\"d\", hexbin.hexagon())\n      .attr(\"fill\", (d: any) => color(d))\n      .attr(\"stroke\", \"currentColor\")\n      .attr(\"stroke-width\", \"0.5\");\n  } catch (error) {\n    // console.log(\"error\", error);\n  }\n};\n","import D3Hexbin from \"./D3Hexbin\";\n\nexport * from \"./D3Hexbin.typings\";\n\nexport * from \"./D3Hexbin.utils\";\n\nexport default D3Hexbin;\n","import React from \"react\";\nimport D3Chart, { IBaseD3ChartProps } from \"components/charts/D3Chart\";\nimport { createHexbinChart } from \"./D3Hexbin.utils\";\nimport { HexbinPoints } from \"./D3Hexbin.typings\";\n\ninterface IProps extends IBaseD3ChartProps {\n  data: {\n    points: HexbinPoints;\n    geojson: d3.GeoPermissibleObjects | any;\n    width?: number;\n    height?: number;\n  };\n}\n\nconst D3Hexbin = ({ data, ...rest }: IProps) => {\n  const ref = React.useRef(null);\n  const refSVG = React.useRef(null);\n  React.useLayoutEffect(() => {\n    if (ref.current && refSVG.current && data) {\n      createHexbinChart({\n        svg: refSVG.current,\n        container: ref.current,\n        ...data,\n      });\n    }\n  }, [ref, refSVG, data]);\n  return (\n    <D3Chart\n      {...{\n        ...rest,\n        ref: {\n          ref,\n          refSVG,\n        } as any,\n      }}\n    />\n  );\n};\n\nexport default D3Hexbin;\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport appStyle from \"styles/App.module.scss\";\n\nconst Loading: React.FC<\n  React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > & {\n    className?: string;\n    isCenterAbsolute?: boolean;\n  }\n> = ({ className, isCenterAbsolute, ...rest }) => (\n  <div\n    className={`${isCenterAbsolute && appStyle.absCenter} ${classNames(\n      className\n    )}`}\n    {...rest}\n  >\n    <i className=\"fa-solid fa-spinner fa-spin-pulse fa-2xl\" />\n  </div>\n);\nLoading.defaultProps = {\n  className: \"\",\n  isCenterAbsolute: true,\n};\n\nexport default React.memo(Loading);\n","import { useState, useEffect } from \"react\";\n\nconst getWindowDimensions = () => {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n};\n\nfunction useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n\nexport default useWindowDimensions;\n","import React from \"react\";\nimport D3Hexbin from \"components/charts/D3Hexbin\";\nimport useWindowDimensions from \"hooks/useWindowDimensions\";\nimport geojson from \"./vngeometry.json\";\n\nconst HexbinChart = () => {\n  const { width, height } = useWindowDimensions();\n  return (\n    <D3Hexbin\n      data={{\n        points: [\n          [106.53657616500936, 10.971086861233012],\n          [106.68383, 20.865139],\n          [105.973907, 9.602521],\n          [106.713028, 10.924067],\n          [105.681335, 18.679585],\n        ],\n        geojson,\n        width: 0.5 * width,\n        height: height - 64,\n      }}\n    />\n  );\n};\n\nexport default React.memo(HexbinChart);\n"],"names":["D3Chart","React","props","ref","refSVG","chartName","isLoading","classNameContainer","classNameSVGChart","children","className","classNames","Loading","defaultProps","thirdPi","Math","PI","angles","pointX","d","pointY","r","dx","dy","x0","y0","x1","y1","x","y","hexbin","points","i","binsById","bins","n","length","isNaN","px","call","point","py","pj","round","pi","py1","abs","px1","pi2","pj2","px2","py2","id","bin","push","hexagon","radius","map","angle","sin","cos","join","centers","j","mesh","fragment","slice","p","_","arguments","size","extent","createHexbinChart","geojson","width","height","svg","$svg","d3","attr","html","centroid","projection","scale","translate","fitSize","render","features","forEach","item","append","datum","color","d3Hexbin","hexbinPoints","selectAll","data","enter","error","rest","current","container","isCenterAbsolute","appStyle","getWindowDimensions","window","innerWidth","innerHeight","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","HexbinChart","useWindowDimensions","D3Hexbin"],"sourceRoot":""}
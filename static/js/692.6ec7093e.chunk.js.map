{"version":3,"file":"static/js/692.6ec7093e.chunk.js","mappings":"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","sources":["components/charts/D3Hierachy/D3Hierachy.utils.ts","utils/stack.ts","webpack://poc-app/./src/components/charts/D3Hierachy/D3Hierachy.styles.module.scss?8b74","components/charts/D3Hierachy/D3Hierachy.3D.tsx","env/index.ts","hooks/useWindowDimensions.ts","pages/hierachy_map/Map.utils.ts","components/core/Panel/index.tsx","pages/hierachy_map/Map.services.ts","http-request/index.ts","pages/hierachy_map/Map.constant.ts","pages/hierachy_map/Map.hooks.ts","pages/hierachy_map/Map.HierachyMap.tsx","pages/hierachy_map/Map.AlertsAndTickets.tsx","pages/hierachy_map/Map.Ranking.tsx","pages/hierachy_map/Map.EnergyConsumption.tsx","pages/hierachy_map/Map.tsx","pages/hierachy_map/Map.zustand.ts","pages/hierachy_map/index.ts","utils/isJSONString.ts"],"sourcesContent":["/* eslint-disable no-bitwise */\n/* eslint-disable prefer-arrow-callback */\nimport * as d3 from \"d3\";\nimport { ENV } from \"env\";\nimport { cachePromise } from \"utils/cachePromise\";\nimport * as echarts from \"echarts\";\nimport Stack from \"utils/stack\";\nimport isEqual from \"lodash/isEqual\";\nimport { HierachyData } from \"./D3Hierachy.typings\";\n\nconst stack2D = new Stack();\nconst stack3D = new Stack();\n\nconst renderEchartsMap = ({\n  hierachy,\n  mapName,\n  mapEcharts,\n  nameProperty,\n  renderTooltip,\n}: {\n  hierachy: HierachyData;\n  mapName: string;\n  mapEcharts: echarts.EChartsType;\n  nameProperty: string | any;\n  renderTooltip: (feature: any) => any;\n}) => {\n  const { geometry, regions = [] } = hierachy;\n  const scaleColor = d3.scaleOrdinal(regions, d3.schemeCategory10);\n  echarts.registerMap(mapName, geometry);\n  const defaultAreaColor = \"#333D3F\";\n  const rbgDefaultAreaColor = d3.color(defaultAreaColor) as d3.RGBColor;\n  const rbgShadowColor = rbgDefaultAreaColor;\n  rbgShadowColor.opacity = 0.5;\n  const rgbaShadowColor = String(rbgShadowColor);\n  const options = {\n    geo: {\n      map: mapName,\n      zoom: 1,\n      roam: true,\n      animation: false,\n      nameProperty,\n      label: {\n        show: false,\n      },\n      itemStyle: {\n        areaColor: defaultAreaColor,\n        shadowColor: rgbaShadowColor,\n        shadowOffsetX: 0,\n        shadowOffsetY: 10,\n      },\n    },\n    series: [\n      {\n        name: \"map\",\n        type: \"map\",\n        map: mapName,\n        selectedMode: false,\n        roam: true,\n        label: {\n          show: false,\n          color: \"#ffffff\",\n        },\n\n        itemStyle: {\n          areaColor: defaultAreaColor,\n          shadowColor: rgbaShadowColor,\n          shadowOffsetX: -2,\n          shadowOffsetY: 2,\n          shadowBlur: 10,\n        },\n        emphasis: {\n          label: {\n            color: \"#ffffff\",\n          },\n          itemStyle: {\n            areaColor: \"#6289AB\",\n            shadowColor: rgbaShadowColor,\n            shadowOffsetX: 0,\n            shadowOffsetY: 10,\n          },\n        },\n        data: regions.map((r) => {\n          const areaColor = scaleColor(r);\n          const rgbColor = d3.color(areaColor) as d3.RGBColor;\n          const shadowColor = rgbColor;\n          shadowColor.opacity = 1;\n          const emphasisShadowColor = rgbColor;\n          emphasisShadowColor.opacity = 0.5;\n          return {\n            name: r,\n            label: {\n              show: false,\n              color: \"#FFF\",\n            },\n            itemStyle: {\n              areaColor,\n              shadowColor: String(shadowColor),\n              shadowOffsetX: 0,\n              shadowOffsetY: 10,\n            },\n            emphasis: {\n              focus: \"self\",\n              label: {\n                color: \"#FFFFFF\",\n                show: true,\n              },\n              itemStyle: {\n                areaColor,\n                shadowColor: String(emphasisShadowColor),\n                shadowOffsetX: 0,\n                shadowOffsetY: 10,\n              },\n            },\n          };\n        }),\n      },\n    ],\n    tooltip: {\n      show: true,\n      trigger: \"item\" as any,\n      formatter: (params: { [key: string]: any } | any[] | any) => {\n        const { name } = params;\n        const feature = geometry?.features.find((f: any) =>\n          isEqual(f?.properties?.name, name)\n        );\n        if (feature) {\n          return renderTooltip({ feature, name });\n        }\n        return \"\";\n      },\n      // alwaysShowContent: true,\n      padding: 0,\n      borderWidth: 0,\n    },\n  };\n  mapEcharts.setOption(options);\n  mapEcharts.hideLoading();\n};\n\nlet $echartsMap: echarts.EChartsType | any;\n/**\n * createHierachyChart3D this function using for generator 3D map\n * @param container - HTMLDivElement div container -> using for draw map\n * @param hierachy - HierachyData recursive json data\n */\nexport const createHierachyChart3D = (paramsFnc: {\n  container: HTMLDivElement;\n  hierachy: HierachyData;\n  renderTooltip: (feature: any) => any;\n  width: number | any;\n  height: number | any;\n}) => {\n  let $echartMapEle;\n  try {\n    const { hierachy, container, renderTooltip, width, height } = paramsFnc;\n    const $container = d3.select(container);\n    if (!hierachy) {\n      $echartsMap.dispose();\n      return;\n    }\n    const {\n      geometry, // geometry json\n      children = [], // children hierachy recursive\n      name, // name map\n      nameProperty = \"name\", // https://echarts.apache.org/en/option.html#geo.nameProperty\n      // useAssetPath = false, // if useAssetPath === true -> get geometry data from asset resource (geometry is really heavy)\n      id,\n    } = hierachy;\n    // bind id for container\n\n    if ($echartsMap) {\n      $echartsMap.dispose(); // trick for re-draw chart\n    }\n    $echartMapEle = $container.append(\"div\").attr(\"id\", id).node() as any;\n    // init chart -> $echartsMap is instance of echarts.EChartsType\n    $echartsMap = echarts.init($echartMapEle, undefined, { width, height });\n    // show loading\n    $echartsMap.showLoading();\n    // function to render Echarts map\n    renderEchartsMap({\n      hierachy,\n      mapName: name,\n      mapEcharts: $echartsMap,\n      nameProperty,\n      renderTooltip,\n    });\n    const isStackEmpty = stack3D.isEmpty();\n    const handleEvent = ({ dataIndex }: any) => {\n      let child;\n      // get feature base on index\n      const feature = geometry.features[dataIndex];\n      // find geometry feature base on properties\n      if (feature) {\n        child = children.find((c) =>\n          isEqual(c.name, feature?.properties?.name)\n        );\n      }\n      return child;\n    };\n    // handle for event on click area\n    $echartsMap.on(\"click\", (params: any) => {\n      // when click to area (district, states, province,...)\n      // if they have children (mean it's hierachy) ->\n      // push current hierachy to stack + re-create chart base on data\n      const child: HierachyData | any = handleEvent(params);\n      if (child) {\n        stack3D.push(hierachy);\n        createHierachyChart3D({ ...paramsFnc, hierachy: child });\n      }\n    });\n    // handle for event go back when double click area\n    $echartsMap.on(\"dblclick\", (params: any) => {\n      const child: HierachyData | any = handleEvent(params);\n      if (!isStackEmpty) {\n        // when stack is empty -> we no need back\n        if (!child) {\n          const peek = stack3D.peek();\n          stack3D.pop();\n          createHierachyChart3D({\n            ...paramsFnc,\n            hierachy: peek as unknown as HierachyData,\n          });\n        }\n      }\n    });\n    // handle for event zoom\n    $echartsMap.on(\"georoam\", (params: any) => {\n      const option: any = $echartsMap.getOption();\n      if (params.zoom) {\n        option.geo[0].zoom = option.series[0].zoom;\n        option.geo[0].center = option.series[0].center;\n      } else {\n        option.geo[0].center = option.series[0].center;\n      }\n      $echartsMap.setOption(option);\n    });\n  } catch (error) {\n    //\n  }\n  return $echartMapEle;\n};\n\nexport const createHierachyChart2D = async (params: {\n  svg: SVGSVGElement;\n  container: HTMLDivElement;\n  hierachy: HierachyData;\n  width?: number | any;\n  height?: number | any;\n}) => {\n  try {\n    const { svg, hierachy, width = 800, height = 400 } = params;\n    const {\n      geometry: geometryPath,\n      children = [],\n      // points = [],\n    } = hierachy;\n    const assetPath = `${ENV.ASSETS_PATH}/${geometryPath}`;\n    const geometry: any = await cachePromise(assetPath, () =>\n      d3.json(assetPath)\n    );\n    const $svg = d3\n      .select(svg)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewbox\", `0,0,${width},${height}`);\n    $svg.html(\"\");\n    // draw map\n    const centroid = d3.geoPath().centroid(geometry);\n    const projection = d3 // https://github.com/d3/d3-geo#projections\n      .geoMercator()\n      .scale(1 / (2 * Math.PI))\n      .translate(centroid)\n      .fitSize([width, height], geometry);\n    // Generator map from project + geometry data: https://github.com/d3/d3-geo#geoPath\n    // NOTE: every map will has difference projection (scale, center, translate, v...v). We need research source from google to make sure it can be work\n    const color = d3.scaleOrdinal(geometry.features, d3.schemeCategory10);\n    const printData = (render: any) => {\n      $svg.html(\"\");\n      geometry.features.forEach((item: any) => {\n        $svg\n          .append(\"path\")\n          .datum(item)\n          .attr(\"class\", \"geometry-map\")\n          .attr(\"pointer-events\", \"visible\")\n          .attr(\"stroke\", \"#777\")\n          .attr(\"stroke-width\", 0.5)\n          .attr(\"stroke-linejoin\", \"round\")\n          .attr(\"cursor\", \"pointer\")\n          .attr(\"fill\", \"none\")\n          .attr(\"d\", (d: any) => render(d))\n          .each(function eachSelection(d) {\n            const $this = d3.select(this);\n            const child = children.find((c) => c.id === d.properties.id);\n            const hasChild = !!child?.id;\n            const isStackEmpty = stack2D.isEmpty();\n            if (hasChild) {\n              $this.attr(\"opacity\", 1);\n              $this.attr(\"fill\", color(d));\n            } else {\n              $this.attr(\"opacity\", 0.5);\n            }\n            $this\n              .on(\"mouseover\", function onMouseOver() {\n                $this.attr(\"opacity\", 1);\n                if (!hasChild) {\n                  $this.attr(\"fill\", \"#FFF\");\n                }\n              })\n              .on(\"mouseleave\", function onMouseLeave() {\n                if (!hasChild) {\n                  $this.attr(\"opacity\", 0.5);\n                  $this.attr(\"fill\", \"none\");\n                }\n              })\n              .on(\"click\", function onClick() {\n                if (hasChild) {\n                  // has child -> continue\n                  stack2D.push(hierachy);\n                  createHierachyChart2D({ ...params, hierachy: child });\n                }\n              })\n              .on(\"dblclick\", function onDoubleClick() {\n                if (!isStackEmpty) {\n                  // check if stack2D is not empty (initial case)\n                  if (!hasChild) {\n                    // item don't have children -> go back\n                    const peek = stack2D.peek();\n                    stack2D.pop();\n                    createHierachyChart2D({\n                      ...params,\n                      hierachy: peek as unknown as HierachyData,\n                    });\n                  }\n                }\n              });\n          });\n      });\n    };\n    printData(d3.geoPath(projection));\n  } catch (error) {\n    //\n  }\n};\n","class Stack {\n  stack: any[];\n\n  constructor() {\n    this.stack = [];\n  }\n\n  push(item: any) {\n    this.stack.push(item);\n  }\n\n  pop() {\n    this.stack.pop();\n  }\n\n  peek() {\n    return !this.isEmpty() ? this.stack[this.size - 1] : undefined;\n  }\n\n  isEmpty() {\n    return this.size === 0;\n  }\n\n  get size() {\n    return this.stack.length;\n  }\n\n  get stackItems() {\n    return this.stack;\n  }\n}\n\nexport default Stack;\n","// extracted by mini-css-extract-plugin\nexport default {\"tooltip\":\"D3Hierachy_styles_tooltip__IO1VA\"};","import React from \"react\";\nimport D3Chart, { IBaseD3ChartProps } from \"components/charts/D3Chart\";\nimport classNames from \"classnames\";\nimport ReactDOM from \"react-dom/server\";\nimport * as d3 from \"d3\";\nimport { createHierachyChart3D } from \"./D3Hierachy.utils\";\nimport { HierachyData } from \"./D3Hierachy.typings\";\nimport styles from \"./D3Hierachy.styles.module.scss\";\n\ninterface IProps extends IBaseD3ChartProps {\n  data: {\n    hierachy: HierachyData | any;\n    width: number | any;\n    height: number | any;\n  };\n  renderTooltip?: (data: {\n    feature: any;\n    name: string;\n  }) => React.ReactNode | React.ReactElement | any;\n}\n\nconst D3Hierachy: React.FC<IProps> = ({\n  data,\n  renderTooltip,\n  isLoading,\n  ...rest\n}: IProps) => {\n  const ref = React.useRef(null);\n  const callbackRenderTooltip = (dt: { feature: any; name: string }) => {\n    let $tooltip;\n    const { feature } = dt;\n    if (typeof renderTooltip === \"function\") {\n      $tooltip = renderTooltip(dt);\n    } else {\n      $tooltip = (\n        <div>\n          {Object.entries(feature?.properties).map(\n            ([key, value]: [string, any]) => (\n              <div\n                className={`grid gap-3 ${classNames(styles.tooltip)}`}\n                key={key}\n              >\n                <div className=\"font-medium text-base text-black\">{key}</div>\n                {value && <div>{value}</div>}\n              </div>\n            )\n          )}\n        </div>\n      );\n    }\n    return ReactDOM.renderToString($tooltip);\n  };\n  React.useEffect(() => {\n    if (isLoading || !ref.current) {\n      return;\n    }\n    const $echartMapEle = createHierachyChart3D({\n      container: ref.current,\n      ...data,\n      renderTooltip: callbackRenderTooltip,\n    });\n    return () => {\n      if ($echartMapEle) {\n        d3.select($echartMapEle).remove();\n      }\n    };\n  }, [ref, data, renderTooltip]);\n  return (\n    <D3Chart\n      {...{\n        ...rest,\n        isLoading,\n        ref: {\n          ref,\n        } as any,\n      }}\n    >\n      {!isLoading && !data.hierachy && <div>Geojson is not valid</div>}\n    </D3Chart>\n  );\n};\n\nD3Hierachy.defaultProps = {\n  renderTooltip: undefined,\n};\n\nexport default React.memo(D3Hierachy);\n","export const ENV = {\n  PUBLIC_URL: process.env.PUBLIC_URL || \"\",\n  ASSETS_PATH: `${process.env.PUBLIC_URL || \"\"}/sampleData`,\n  API_DOMAIN_URL: `${\n    process.env.API_DOMAIN_URL || \"https://app-portal-ppe1.envisioniot.com\"\n  }/demo_service/v1.0`,\n};\n","import { useState, useEffect } from \"react\";\n\nconst getWindowDimensions = () => {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n};\n\nfunction useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n\nexport default useWindowDimensions;\n","import { HierachyData } from \"components/charts/D3Hierachy\";\nimport uniq from \"lodash/uniq\";\nimport isEqual from \"lodash/isEqual\";\nimport toLower from \"lodash/toLower\";\nimport toUpper from \"lodash/toUpper\";\nimport isNaN from \"lodash/isNaN\";\nimport max from \"lodash/max\";\nimport min from \"lodash/min\";\nimport {\n  EnergyConsumptionItem,\n  EnergyConsumptionUnit,\n  MapProperty,\n} from \"./Map.typings\";\n\nexport const STANDARD_ENERGY_CONSUMPTION_UNIT = \"Wh\";\n\nexport const ENERGY_BASE_UNIT = \"Wh\";\n\nexport const ENERGY_DENSITY_AREA_BASE_UNIT = \"m²\";\n\nexport const CARBON_BASE_UNIT = \"CO2e\";\n\nexport const CARBON_DENSITY_BASE_UNIT = \"CO2e/m²\";\n\nexport const EC_UNITS: {\n  [key in EnergyConsumptionUnit]: string;\n} = {\n  baseWatt: \"Wh\",\n  kgWatt: \"kWh\",\n  megaWatt: \"MWh\",\n  gigaWatt: \"GWh\",\n};\n\n/**\n * convertECByUnit Convert energy consumption value base on unit\n * @param { value, unit } : EnergyConsumptionItem\n * @returns number\n */\nexport const convertECByUnit = ({ value, unit }: EnergyConsumptionItem) => {\n  let valConverted = 0;\n  try {\n    if (!isNaN(value)) {\n      switch (unit) {\n        case \"kgWatt\":\n          valConverted = value * 1e3;\n          break;\n        case \"megaWatt\":\n          valConverted = value * 1e6;\n          break;\n        case \"gigaWatt\":\n          valConverted = value * 1e9;\n          break;\n        default:\n          valConverted = value;\n          break;\n      }\n    }\n  } catch (error) {\n    //\n  }\n  return valConverted;\n};\n\n/**\n * findDivideBaseOnValuesEC Find divide base on values energy consumption\n * @param values number[]\n * @returns { divide: number, unit: string }\n */\nexport const findDivideBaseOnValuesEC = (\n  values: number[],\n  isDensity = false\n) => {\n  let divide = 1;\n  let unit = EC_UNITS.baseWatt;\n  const maxValue = max(values) || 0;\n\n  if (maxValue >= 1e9) {\n    divide = 1e9;\n    unit = EC_UNITS.gigaWatt;\n  } else if (maxValue >= 1e6) {\n    divide = 1e6;\n    unit = EC_UNITS.megaWatt;\n  } else if (maxValue >= 1e3) {\n    divide = 1e3;\n    unit = EC_UNITS.kgWatt;\n  }\n  let minFractionDigits = 2;\n  const minValue = (min(values) || 0) / divide;\n  if (minValue > 0 && minValue < 1) {\n    minFractionDigits = -Math.floor(Math.log10(minValue));\n  }\n  return {\n    divide,\n    unit: isDensity ? `${unit}/${ENERGY_DENSITY_AREA_BASE_UNIT}` : unit,\n    minFractionDigits,\n  };\n};\n\nexport const formatterValueToLocaleString = ({\n  value,\n  divide = 1,\n  fractionDigits = 2,\n  unit,\n}: {\n  value: number;\n  divide?: number;\n  fractionDigits?: number;\n  unit?: string;\n}) => {\n  try {\n    const divided = value / divide;\n    const locale = divided.toLocaleString(undefined, {\n      minimumFractionDigits: fractionDigits,\n    });\n    return `${locale} ${unit || \"\"}`;\n  } catch (error) {\n    //\n  }\n  return `${value}`;\n};\n\nconst createFeature = (\n  mapProperty: MapProperty,\n  geojson: d3.GeoPermissibleObjects | any,\n  listProperties: string[]\n) => {\n  try {\n    const { id, name, mapProperties } = mapProperty;\n    const geojsonMapping = geojson.features.map(\n      ({ properties, geometry: { coordinates, type } }: any) => ({\n        coordinates,\n        properties,\n        type,\n      })\n    );\n    const coordinates: any = [];\n    mapProperties.forEach((i: any) => {\n      const splitByComma = i.split(\",\");\n      splitByComma.forEach((propertyName: string) => {\n        listProperties.push(propertyName);\n        const foundCoordinates = geojsonMapping.find((gItem: any) =>\n          isEqual(toLower(gItem.properties.name), toLower(propertyName))\n        );\n        if (foundCoordinates) {\n          switch (foundCoordinates.type) {\n            case \"LineString\": {\n              // convert to polygon\n              coordinates.push([foundCoordinates.coordinates]);\n              break;\n            }\n            case \"Polygon\":\n              coordinates.push(foundCoordinates.coordinates);\n              break;\n            case \"MultiPolygon\": {\n              foundCoordinates.coordinates.forEach((polygon: any) => {\n                coordinates.push(polygon);\n              });\n              break;\n            }\n\n            default:\n              break;\n          }\n        }\n      });\n    });\n    const feature = {\n      type: \"Feature\",\n      id,\n      geometry: {\n        type: \"MultiPolygon\",\n        coordinates,\n      },\n      properties: { name },\n    };\n    return feature;\n  } catch (error) {\n    //\n  }\n};\n\nexport const convertMapPropertiesToCoordinates = (\n  regionMapProperties: MapProperty[],\n  hierachyData: HierachyData | undefined\n) => {\n  const features: any[] = [];\n  let listProperties: string[] = [];\n  try {\n    if (hierachyData) {\n      const { geometry } = hierachyData;\n      regionMapProperties.forEach((i: MapProperty, index) => {\n        const feature = createFeature(i, geometry, listProperties);\n        if (feature) {\n          const fItem = features[index];\n          features[index] = { ...fItem, ...feature };\n        }\n      });\n      listProperties = uniq(listProperties);\n    }\n  } catch (error) {\n    //\n  }\n  return { listProperties, features };\n};\n\nexport const convertFromStringToArrayPropertyList = (data: string) =>\n  data?.split(\",\").map((p) => toUpper(p)) || [];\n","import React from \"react\";\nimport Loading from \"components/core/Loading\";\n\ninterface IProps {\n  title: string;\n  sub?: React.ReactNode | React.ReactElement | any;\n  className?: string | undefined | any;\n  isLoading?: boolean;\n  classNameBlockTitle?: string | any;\n  childrenCenter?: boolean;\n  panelTitleClassName?: string | undefined | any;\n}\nconst Panel: React.FC<\n  IProps &\n    React.DetailedHTMLProps<\n      React.HTMLAttributes<HTMLDivElement>,\n      HTMLDivElement\n    >\n> = ({\n  title,\n  children,\n  sub,\n  className = \"\",\n  isLoading,\n  classNameBlockTitle,\n  childrenCenter,\n  panelTitleClassName = \"\",\n  ...rest\n}) => (\n  <div\n    className={`relative bg-[#212029] p-5 h-auto ${className || \"\"}`}\n    {...rest}\n  >\n    <div\n      className={`grid items-center justify-between gap-3 ${classNameBlockTitle}`}\n    >\n      <div\n        className={`panel-title font-medium text-white truncate max-w-100px ${\n          panelTitleClassName || \"\"\n        }`}\n      >\n        {title}\n      </div>\n      {sub && sub}\n    </div>\n    {isLoading ? (\n      <Loading />\n    ) : (\n      children && (\n        <div\n          className={`${\n            childrenCenter ? \"flex justify-center items-center\" : \"\"\n          } `}\n        >\n          {children}\n        </div>\n      )\n    )}\n  </div>\n);\n\nPanel.defaultProps = {\n  sub: null,\n  className: \"\",\n  isLoading: false,\n  classNameBlockTitle: \"\",\n  childrenCenter: false,\n  panelTitleClassName: \"\",\n};\nexport default React.memo(Panel);\n","import { ENV } from \"env\";\nimport HTTP from \"http-request\";\nimport {\n  RegionResponse,\n  AlertsAndTicketsResponse,\n  EnergyRankingResponse,\n  EnergyConsumptionResponse,\n  GeneralResponse,\n  GeojsonMapOfACountryResponse,\n  GeojsonMapPropertyListOfACountryResponse,\n  ListCountryResponse,\n  RegionListResponse,\n  APIResponse,\n  CountryStatusListResponse,\n} from \"./Map.typings\";\n\nconst http = new HTTP({ baseURL: `${ENV.API_DOMAIN_URL}/map` });\n\n/**\n * getMapGeneral: Get general information\n */\nexport const getMapGeneral: () => Promise<GeneralResponse> = () =>\n  http.get(\"general\");\n\n/**\n * getGeojsonMapOfACountryResponse: Get geojson map of a country\n * @param country: string;\n */\nexport const getGeojsonMapOfACountry: (\n  country: string\n) => Promise<GeojsonMapOfACountryResponse> = (country) =>\n  http.get(`geojsonmap?Country=${country}`);\n\n/**\n * operationGeojsonMapOfACountry: Create / Update geojson map of a country\n * @param country: string;\n * @param geojson: d3.GeoGeometryObjects | any;\n */\nexport const operationGeojsonMapOfACountry: (\n  country: string,\n  geojson: d3.GeoGeometryObjects | any\n) => Promise<GeojsonMapOfACountryResponse> = (country, geojson) =>\n  http.post(`geojsonmap?Country=${country}`, geojson);\n\n/**\n * getPropertyList: Get property (name) list of a country\n * @param country: string;\n */\nexport const getPropertyList: (\n  country: string\n) => Promise<GeojsonMapPropertyListOfACountryResponse> = (country) =>\n  http.get(`geojsonmappropertylist?Country=${country}`);\n\n/**\n * getRegion: Get details info of a region\n * @param country: string;\n * @param region: string;\n */\nexport const getRegion: (\n  country: string,\n  region: string\n) => Promise<RegionResponse> = (country, region) =>\n  http.get(`region?Country=${country}&Region=${region}`);\n\n/**\n * createRegion: Create general details info of a region\n * @param country: string;\n * @param region: string;\n */\nexport const createRegion: (\n  country: string,\n  region: string,\n  updateInfo: {\n    map_properties?: string;\n    buildings?: number;\n    floor_area?: number;\n    energy_densisty_YTD?: number;\n    active_alerts?: number;\n    open_tickets?: number;\n    energy_consumption?: number;\n  }\n) => Promise<RegionResponse> = (country, region, updateInfo) =>\n  http.post(`region`, {\n    country,\n    regionname: region,\n    ...updateInfo,\n  });\n\n/**\n * updateRegion: Update general details info of a region\n * @param country: string;\n * @param region: string;\n */\nexport const updateRegion: (\n  country: string,\n  region: string,\n  updateInfo: {\n    map_properties?: string;\n    buildings?: number;\n    floor_area?: number;\n    energy_densisty_YTD?: number;\n    active_alerts?: number;\n    open_tickets?: number;\n    energy_consumption?: number;\n  }\n) => Promise<RegionResponse> = (country, region, updateInfo) =>\n  http.put(`region`, {\n    country,\n    regionname: region,\n    ...updateInfo,\n  });\n\n/**\n * deleteRegion: Delete a region\n * @param id: number | string;\n */\nexport const deleteRegion: (id: any) => Promise<APIResponse> = (id: any) =>\n  http.post(`${id}/region`, {});\n\n/**\n * getAlertsTickets: Get alerts & tickets of country\n * @return AlertsAndTicketsResponse\n */\nexport const getAlertsTickets: (\n  country: string\n) => Promise<AlertsAndTicketsResponse> = (country) =>\n  http.get(`alertstickets?Country=${country}`);\n\n/**\n * operationAlertsTickets: Create / update alerts & tickets of country\n * @return AlertsAndTicketsResponse\n */\nexport const operationAlertsTickets: (body: {\n  country: string;\n  alerts: number;\n  tickets: number;\n}) => Promise<APIResponse> = (body) => http.post(`alertstickets`, body);\n\n/**\n * getEnergyConsumption: Get energy consumption of a country\n * @param country: string\n */\nexport const getEnergyConsumption: (\n  country: string\n) => Promise<EnergyConsumptionResponse> = (country) =>\n  http.get(`energyconsumption?Country=${country}`);\n\n/**\n * getEnergyRanking: Get energy ranking by country\n */\nexport const getEnergyRanking: (\n  country: string\n) => Promise<EnergyRankingResponse> = (country) =>\n  http.get(`energyranking?Country=${country}`);\n\n/**\n * getListCountry\n * @returns string[]\n */\nexport const getListCountry: () => Promise<ListCountryResponse> = () =>\n  http.get(\"countrylist\");\n\n/**\n * getRegionList: Get list region of country\n */\nexport const getRegionList: (country: string) => Promise<RegionListResponse> = (\n  country\n) => http.get(`regionlist?Country=${country}`);\n\n/**\n * deleteGeojsonMap: Delete geoJson map data by id\n */\nexport const deleteGeojsonMap: (countyId: number) => Promise<APIResponse> = (\n  countryId\n) => http.delete(`${countryId}/geojsonmap`);\n\n/**\n * activeGeojsonMap: Update geoJson map data actived\n */\nexport const activeGeojsonMap: (countyId: number) => Promise<APIResponse> = (\n  countryId\n) => http.post(`${countryId}/geojsonmap`);\n\n/**\n * getCountryStatusList: Get country list\n */\nexport const getCountryStatusList: () => Promise<CountryStatusListResponse> =\n  () => http.get(`countrystatuslist`);\n\n/**\n * operationEnergyRanking: Create / update energy ranking item\n * @param country: string;\n * @param buildingname: string;\n */\nexport const operationEnergyRanking: (\n  country: string,\n  buildingname: string,\n  updateInfo: {\n    energy: number;\n    energy_density: number;\n  }\n) => Promise<RegionResponse> = (country, buildingname, updateInfo) =>\n  http.post(`energyranking?Country=${country}`, {\n    country,\n    buildingname,\n    ...updateInfo,\n  });\n\n/**\n * deleteEnergyRanking: Delete energy ranking record\n * @param id: number | string;\n */\nexport const deleteEnergyRanking: (id: any) => Promise<APIResponse> = (\n  id: any\n) => http.post(`${id}/energyranking`, {});\n","class HTTP {\n  baseURL: string;\n\n  controller: AbortController;\n\n  requestInit: RequestInit;\n\n  constructor({ baseURL }: { baseURL: string }) {\n    this.baseURL = baseURL;\n    this.controller = new AbortController();\n    this.requestInit = {\n      cache: \"no-cache\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"*\",\n        \"Access-Control-Allow-Headers\": \"*\",\n      },\n      credentials: \"same-origin\", // include, *same-origin, omit\n      redirect: \"follow\", // manual, *follow, error\n      referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    };\n  }\n\n  get(url: string) {\n    const { signal } = this.controller;\n    return fetch(`${this.baseURL}/${url}`, {\n      ...this.requestInit,\n      method: \"GET\",\n      signal,\n    })\n      .then((res) => res.json())\n      .catch((error) => {\n        throw new Error(error);\n      });\n  }\n\n  post(url: string, data?: any) {\n    const { signal } = this.controller;\n    return fetch(`${this.baseURL}/${url}`, {\n      ...this.requestInit,\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n      signal,\n    })\n      .then((res) => res.json())\n      .catch((error) => {\n        throw new Error(error);\n      });\n  }\n\n  put(url: string, data?: any) {\n    const { signal } = this.controller;\n    return fetch(`${this.baseURL}/${url}`, {\n      ...this.requestInit,\n      method: \"PUT\", // *GET, POST, PUT, DELETE, etc.\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n      signal,\n    })\n      .then((res) => res.json())\n      .catch((error) => {\n        throw new Error(error);\n      });\n  }\n\n  delete(url: string, data?: any) {\n    const { signal } = this.controller;\n    return fetch(`${this.baseURL}/${url}`, {\n      ...this.requestInit,\n      method: \"DELETE\", // *GET, POST, PUT, DELETE, etc.\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n      signal,\n    })\n      .then((res) => res.json())\n      .catch((error) => {\n        throw new Error(error);\n      });\n  }\n\n  abort() {\n    this.controller.abort();\n  }\n}\n\nexport default HTTP;\n","import {\n  RegionProperty,\n  EnergyRankingProperty,\n  AlertsAndTicketsProperty,\n} from \"./Map.typings\";\n\nexport const REGION_NAME = \"regionname\";\nexport const REGION_COORDINATES = \"map_properties\";\nexport const REGION_ENERGY_CONSUMPTION = \"energy_consumption\";\nexport const REGION_ENERGY_DENSITY_CONSUMPTION = \"energy_densisty_YTD\";\nexport const REGION_OPEN_TICKETS = \"open_tickets\";\nexport const REGION_ALERT_TICKETS = \"active_alerts\";\nexport const REGION_BUILDINGS = \"buildings\";\nexport const REGION_FLOOR_AREA = \"floor_area\";\nexport const REGION_TIME = \"time\";\n\nexport const REGION_RECORD_COLUMN: {\n  [key in RegionProperty]: string;\n} = {\n  [REGION_NAME]: \"Region\",\n  [REGION_COORDINATES]: \"Coordinates\",\n  [REGION_ENERGY_CONSUMPTION]: \"Energy Consumption\",\n  [REGION_ENERGY_DENSITY_CONSUMPTION]: \"Energy Density Consumption\",\n  [REGION_OPEN_TICKETS]: \"Open tickets\",\n  [REGION_ALERT_TICKETS]: \"Alert Tickets\",\n  [REGION_BUILDINGS]: \"Buildings\",\n  [REGION_FLOOR_AREA]: \"Floor Area\",\n  [REGION_TIME]: \"Time\",\n};\n\nexport const ENERGY_RANKING_BUILDING_NAME = \"buildingname\";\nexport const ENERGY_RANKING_ENERGY = \"energy\";\nexport const ENERGY_RANKING_ENERGY_DENSITY = \"energy_density\";\n\nexport const ENERGY_RANKING_RECORD_COLUMN: {\n  [key in EnergyRankingProperty]: string;\n} = {\n  [ENERGY_RANKING_BUILDING_NAME]: \"Building Name\",\n  [ENERGY_RANKING_ENERGY]: \"Energy\",\n  [ENERGY_RANKING_ENERGY_DENSITY]: \"Energy Density\",\n};\n\nexport const GEOJSON_INFO_COUNTRY = \"country\";\nexport const GEOJSON_INFO_DATA = \"geojson\";\nexport const GEOJSON_INFO_RECORD_COLUMN = {\n  [GEOJSON_INFO_COUNTRY]: \"Country\",\n  [GEOJSON_INFO_DATA]: \"Geojson\",\n};\n\nexport const ALERTS = \"alerts\";\nexport const TICKETS = \"tickets\";\nexport const ALERTS_DISPLAY_NAME = \"alerts_display_name\";\nexport const TICKETS_DISPLAY_NAME = \"tickets_display_name\";\nexport const DISPLAY_NAME = \"display_name\";\n\nexport const ALERT_AND_TICKETS_RECORD_COLUMN: {\n  [key in AlertsAndTicketsProperty]: string;\n} = {\n  [ALERTS]: \"Alerts\",\n  [TICKETS]: \"Tickets\",\n  [ALERTS_DISPLAY_NAME]: \"\",\n  [TICKETS_DISPLAY_NAME]: \"\",\n  [DISPLAY_NAME]: \"Display name\",\n};\n","import { useMapStore } from \"pages/hierachy_map\";\nimport { HierachyData } from \"components/charts/D3Hierachy\";\nimport React from \"react\";\nimport {\n  useQuery,\n  useQueries,\n  useMutation,\n  useQueryClient,\n  UseQueryResult,\n} from \"@tanstack/react-query\";\nimport { PieChartItemRender } from \"components/charts/D3Pie\";\nimport sum from \"lodash/sum\";\nimport { isJSONString } from \"utils/isJSONString\";\nimport { RankingChartItem } from \"components/charts/Ranking\";\nimport {\n  activeGeojsonMap,\n  createRegion,\n  deleteEnergyRanking,\n  deleteGeojsonMap,\n  deleteRegion,\n  getAlertsTickets,\n  getCountryStatusList,\n  getEnergyConsumption,\n  getEnergyRanking,\n  getGeojsonMapOfACountry,\n  getPropertyList,\n  getRegion,\n  getRegionList,\n  operationAlertsTickets,\n  operationEnergyRanking,\n  operationGeojsonMapOfACountry,\n  updateRegion,\n} from \"./Map.services\";\nimport {\n  AlertsAndTickets,\n  Country,\n  EnergyConsumption,\n  EnergyRanking,\n  MapProperty,\n  Region,\n} from \"./Map.typings\";\nimport {\n  convertFromStringToArrayPropertyList,\n  convertMapPropertiesToCoordinates,\n  ENERGY_DENSITY_AREA_BASE_UNIT,\n  findDivideBaseOnValuesEC,\n  formatterValueToLocaleString,\n} from \"./Map.utils\";\nimport {\n  ALERTS,\n  ALERTS_DISPLAY_NAME,\n  TICKETS,\n  TICKETS_DISPLAY_NAME,\n} from \"./Map.constant\";\n\n/**\n * useCountryStatusList\n * This hook will use to fetch list country (use to know which country actived too)\n * @returns UseQueryResult<CountryStatusListResponse, unknown>\n */\nexport const useCountryStatusList = () => {\n  const { actionSetSelectedCountry } = useMapStore();\n  const countryStatusListQuery = useQuery(\n    [\"country-status-list\"],\n    async () => {\n      const res = await getCountryStatusList();\n      return res?.data || [];\n    },\n    {\n      onSuccess: (data) => {\n        let activedCountry = -1;\n        if (data.length > 0) {\n          activedCountry = data.find((c) => c.actived)?.id || -1;\n        }\n        actionSetSelectedCountry(activedCountry);\n      },\n      placeholderData: [],\n    }\n  );\n  return countryStatusListQuery;\n};\n/**\n * useSelectedCountry\n * This hook will use to find selected country by id\n * @returns Country\n */\nexport const useSelectedCountry = () => {\n  const { country: countryId, geojsonPropertyList } = useMapStore();\n  const { data = [] } = useCountryStatusList();\n  return {\n    country:\n      data.find((c: Country) => c.id === countryId) ||\n      ({ id: -1, country: \"\", actived: false } as Country),\n    propertyList:\n      geojsonPropertyList.find((d) => d.countryId === countryId)\n        ?.propertyList || [],\n  };\n};\n\n/**\n * useActivedCountry\n * This hook will use to determine data of country actived\n * @returns {\n *  country: Country;\n *  countryName: string;\n * }\n */\nexport const useActivedCountry = () => {\n  const { data: countries = [] } = useCountryStatusList();\n  const defaultCountry: Country | undefined = countries.find(\n    (c: Country) => c.actived\n  );\n  return {\n    country: defaultCountry,\n    countryName: defaultCountry?.country || \"\",\n  };\n};\n\n/**\n * useRegionList\n * This hook will use to region list country actived\n * @returns UseQueryResult<string[], unknown>\n */\nexport const useRegionList = () => {\n  const {\n    country: { country },\n  } = useSelectedCountry();\n  const query = useQuery(\n    [\"regionlist\", country],\n    async () => {\n      const res = await getRegionList(country);\n      return res?.data || [];\n    },\n    {\n      enabled: !!country,\n    }\n  );\n  return query;\n};\n\n/**\n * usePropertyList\n * This hook will use to fetch list property name of country actived\n * @returns UseQueryResult<string[], unknown>\n */\nexport const usePropertyList = () => {\n  const {\n    country: { country, id: countryId },\n  } = useSelectedCountry();\n  const { actionSetGeojsonPropertyList } = useMapStore();\n  const propertyListQuery = useQuery(\n    [\"property-list\", country],\n    async () => {\n      const res = await getPropertyList(country);\n      const list = res?.data.split(\",\") || [];\n      return list;\n    },\n    {\n      enabled: !!country,\n      onSuccess: (propertyList: string[]) => {\n        actionSetGeojsonPropertyList({ countryId, propertyList });\n      },\n    }\n  );\n  return propertyListQuery;\n};\n\n/**\n * useGeojsonCountry\n * This hook will use to fetch geojson string of country actived\n * @returns UseQueryResult<string, unknown>\n */\nexport const useGeojsonCountry = () => {\n  const {\n    country: { country },\n  } = useSelectedCountry();\n  const geojsonCountryQuery = useQuery(\n    [\"geojsonmap\", country],\n    async () => {\n      const res = await getGeojsonMapOfACountry(country);\n      return res.data || \"\";\n    },\n    {\n      enabled: !!country,\n    }\n  );\n  return geojsonCountryQuery;\n};\n\n/**\n * useRegionListData\n * This hook will use to region list data of country actived\n * 1/ Fetch region list of country\n * 2/ Fetch region details\n * 3/ Re-mapping data\n * @returns {\n * isLoading: boolean;\n * regionList: Region[];\n * regions: string[];\n * regionMapProperties: MapProperty[];\n * regionListIds: number[];\n * regionListName: string[];\n * }\n */\nexport const useRegionListData = () => {\n  const {\n    country: { country },\n  } = useSelectedCountry();\n  const { data = [] } = useRegionList();\n  const regionQueries = useQueries({\n    queries: data.map((region: string) => ({\n      queryKey: [\"region-details\", region, country],\n      queryFn: () => getRegion(country, region),\n      enabled: data?.length > 0,\n    })),\n  });\n  return React.useMemo(() => {\n    const isLoading = regionQueries.some(\n      (regionQuery) => regionQuery.isLoading\n    );\n    const regionList = regionQueries\n      .map((regionQuery) => regionQuery.data?.data)\n      .filter((r) => !!r)\n      .map((r) => {\n        const { energy_densisty_YTD } = r as Region;\n        const { divide, unit, minFractionDigits } = findDivideBaseOnValuesEC(\n          [energy_densisty_YTD],\n          true\n        );\n        return {\n          ...r,\n          energy_densisty_YTD_formatted: energy_densisty_YTD\n            ? formatterValueToLocaleString({\n                value: energy_densisty_YTD,\n                unit,\n                divide,\n                fractionDigits: minFractionDigits,\n              })\n            : \"-\",\n          buildings_formatted: r?.buildings\n            ? formatterValueToLocaleString({\n                value: r?.buildings,\n              })\n            : \"-\",\n          floor_area_formatted: r?.floor_area\n            ? formatterValueToLocaleString({\n                value: r?.floor_area,\n                unit: ENERGY_DENSITY_AREA_BASE_UNIT,\n              })\n            : \"-\",\n          active_alerts_formatted: r?.active_alerts || \"-\",\n          open_tickets_formatted: r?.open_tickets || \"-\",\n        };\n      }) as Region[];\n    const regionListIds = regionList.map((r) => r.id);\n    const regionListName = regionList.map((r) => r.regionname);\n    const regionMapProperties = regionList.map(\n      ({ id, regionname, map_properties }) => {\n        const mapPropertiesParse =\n          !!map_properties && isJSONString(map_properties)\n            ? JSON.parse(map_properties)\n            : undefined;\n        const mapProperties =\n          typeof mapPropertiesParse !== \"undefined\"\n            ? mapPropertiesParse\n            : [regionname];\n        const result = {\n          id,\n          name: regionname,\n          mapProperties,\n        };\n        return result;\n      }\n    ) as unknown[] as MapProperty[];\n    return {\n      isLoading,\n      regionList,\n      regions: data,\n      regionMapProperties,\n      regionListIds,\n      regionListName,\n    };\n  }, [regionQueries]);\n};\n\n/**\n * useHierachyCountryData\n * This hook will use to get hierachy data of country actived\n * @returns HierachyData\n */\nexport const useHierachyCountryData = () => {\n  const {\n    country: { country },\n  } = useSelectedCountry();\n  const { data: jsonString = \"\" } = useGeojsonCountry();\n  const geojson = isJSONString(jsonString) ? JSON.parse(jsonString) : {};\n  return {\n    id: country,\n    name: country,\n    geometry: geojson,\n    children: [],\n  } as HierachyData;\n};\n\n/**\n * useGeojsonRegions\n * This hook will use to get geojson of each region base on property name of country actived\n * Each region will be a collection of properties name -> we have to convert from regions -> coordinates\n * @returns {\n * geojsonRegions:HierachyData;\n * isLoading: boolean;\n * }\n */\nexport const useGeojsonRegions = () => {\n  const {\n    country: { country },\n  } = useSelectedCountry();\n  const { isLoading: loadingGeojson } = useGeojsonCountry();\n  const hierachyData = useHierachyCountryData();\n  const {\n    regionMapProperties,\n    regionListName,\n    isLoading: loadingRegionList,\n  } = useRegionListData();\n  const { data: propertyList, isLoading: loadingPropertyList } =\n    usePropertyList();\n  return React.useMemo(() => {\n    const { features: regionCoordinates } = convertMapPropertiesToCoordinates(\n      regionMapProperties,\n      hierachyData\n    );\n    let geojson: { type: string; features: any[] } = {\n      type: \"FeatureCollection\",\n      features: [],\n    };\n    if (hierachyData) {\n      const { geometry } = hierachyData;\n      let { features } = geometry;\n      try {\n        features = [...features, ...regionCoordinates];\n        geojson = { ...geometry, features };\n      } catch (error) {\n        //\n      }\n    }\n    return {\n      geojsonRegions: {\n        id: country,\n        name: country,\n        geometry: geojson,\n        children: [],\n        regions: regionListName,\n      } as HierachyData,\n      isLoading: loadingGeojson || loadingPropertyList || loadingRegionList,\n    };\n  }, [\n    hierachyData,\n    regionMapProperties,\n    propertyList,\n    regionListName,\n    loadingGeojson,\n    loadingPropertyList,\n    loadingRegionList,\n    country,\n  ]);\n};\n\n/**\n * useMutationDeleteCountry\n * This hook will use to remove country\n * Will reload 'country-status-list' after remove success\n * @returns UseMutationResult<APIResponse, unknown, number, unknown>\n */\nexport const useMutationDeleteCountry = () => {\n  const queryClient = useQueryClient();\n  const deleteCountryMutation = useMutation(\n    (countryId: number) => deleteGeojsonMap(countryId),\n    {\n      onSuccess() {\n        queryClient.invalidateQueries([\"country-status-list\"]);\n      },\n    }\n  );\n  return deleteCountryMutation;\n};\n\n/**\n * useMutationUpdateActiveCountry\n * This hook will use to update status country => active\n * Will reload 'country-status-list' after remove success\n * @returns UseMutationResult<APIResponse, unknown, number, unknown>\n */\nexport const useMutationUpdateActiveCountry = () => {\n  const queryClient = useQueryClient();\n  const mutation = useMutation(\n    (countryId: number) => activeGeojsonMap(countryId),\n    {\n      onSuccess() {\n        queryClient.invalidateQueries([\"country-status-list\"]);\n      },\n    }\n  );\n  return mutation;\n};\n\n/**\n * useMutationCreateRegion\n * This hook will use to auto generate region\n * Will reload 'country-status-list' after remove success\n * @returns  UseMutationResult<({\n    data: Region;\n} & APIResponse)[], unknown, void, unknown>\n */\nexport const useMutationAutoGenerateRegion = () => {\n  const queryClient = useQueryClient();\n  const {\n    country: { country },\n  } = useSelectedCountry();\n  const mutation = useMutation(\n    async () => {\n      const res = await getPropertyList(country);\n      const propertyList = convertFromStringToArrayPropertyList(res.data);\n      await Promise.all(\n        propertyList.map((region) => createRegion(country, region, {}))\n      );\n      return propertyList;\n    },\n    {\n      onSuccess: (regions: string[]) => {\n        queryClient.refetchQueries([\"regionlist\", country]);\n        regions.forEach((region) => {\n          const key = [\"region-details\", region, country];\n          queryClient.refetchQueries(key, { type: \"all\", exact: true });\n        });\n      },\n    }\n  );\n  return mutation;\n};\n\n/**\n * useMutationDeleteRegion\n * This hook will use to remove region\n * @returns UseMutationResult<APIResponse, unknown, number, unknown>\n */\nexport const useMutationDeleteRegion = () => {\n  const {\n    country: { country },\n  } = useSelectedCountry();\n  const queryClient = useQueryClient();\n  const mutation = useMutation((regionId: number) => deleteRegion(regionId), {\n    onSuccess() {\n      queryClient.refetchQueries([\"regionlist\", country]);\n    },\n  });\n  return mutation;\n};\n\n/**\n * useMutationOperationRegion\n * This hook will use to create / update region\n * @returns UseMutationResult<APIResponse, unknown, number, unknown>\n */\nexport const useMutationOperationRegion = ({\n  isCreate,\n}: {\n  isCreate: boolean;\n}) => {\n  const {\n    country: { country },\n  } = useSelectedCountry();\n  const queryClient = useQueryClient();\n  const mutation = useMutation(\n    async ({ region, info }: { region: string; info: any }) => {\n      if (isCreate) {\n        await createRegion(country, region, info);\n      } else {\n        await updateRegion(country, region, info);\n      }\n      return region;\n    },\n    {\n      onSuccess(region: string) {\n        if (isCreate) {\n          queryClient.refetchQueries([\"regionlist\", country]);\n        } else {\n          const key = [\"region-details\", region, country];\n          queryClient.refetchQueries(key, { type: \"all\", exact: true });\n        }\n      },\n    }\n  );\n  return mutation;\n};\n\n/**\n * useMutationCreateGeojsonMapOfACountry\n * This hook will use to create/update geojson map of a country\n * Will reload 'country-status-list' or 'geojsonmap'\n * @returns UseMutationResult<APIResponse, unknown, number, unknown>\n */\nexport const useMutationOperationGeojsonMapOfACountry = ({\n  isCreate,\n}: {\n  isCreate: boolean;\n}) => {\n  const queryClient = useQueryClient();\n  const mutation = useMutation(\n    async ({\n      country,\n      geojson,\n    }: {\n      country: string;\n      geojson: d3.GeoGeometryObjects | any;\n    }) => {\n      await operationGeojsonMapOfACountry(country, geojson);\n      return country;\n    },\n    {\n      onSuccess(country: string) {\n        if (isCreate) {\n          queryClient.refetchQueries([\"country-status-list\"]);\n        } else {\n          queryClient.refetchQueries([\"geojsonmap\", country]);\n        }\n      },\n    }\n  );\n  return mutation;\n};\n\n/**\n * This function use for get energy consumption of actived country\n * @returns UseQueryResult<\n  EnergyConsumption[],\n  unknown\n>\n */\nexport const useQueryEnergyConsumption: () => UseQueryResult<\n  EnergyConsumption[],\n  unknown\n> = () => {\n  const { countryName: country } = useActivedCountry();\n  const query = useQuery(\n    [`energy-consumption-${country}`],\n    async () => {\n      let result: EnergyConsumption[] = [];\n      try {\n        const res = await getEnergyConsumption(country);\n        result = res?.data || [];\n      } catch (error) {\n        //\n      }\n      return result;\n    },\n    { enabled: !!country, placeholderData: [] }\n  );\n  return query;\n};\n\nexport const useEnergyConsumptionData = () => {\n  const query = useQueryEnergyConsumption();\n  const { data = [], isLoading } = query;\n  return React.useMemo(() => {\n    const values = data.map((i) => i.energyconsumption);\n    const { divide, unit } = findDivideBaseOnValuesEC(values);\n    const energyConsumptionData =\n      data.map(({ regionname, energyconsumption }: EnergyConsumption) => ({\n        id: regionname,\n        label: regionname,\n        value: energyconsumption / divide,\n      })) || [];\n    const total = sum(energyConsumptionData.map((i) => i.value));\n    const formatterValue = (item: PieChartItemRender) =>\n      `${formatterValueToLocaleString({\n        value: item.value,\n        divide: 1,\n        unit,\n      })} | ${item.percent}%`;\n    const renderTooltipValue = (item: PieChartItemRender) =>\n      `${item.label} - ${formatterValueToLocaleString({\n        value: item.value,\n        divide: 1,\n        unit,\n      })} | ${item.percent}%`;\n    const result = {\n      donutText: !isLoading\n        ? `${formatterValueToLocaleString({ value: total, divide: 1, unit })}`\n        : \"-\",\n      subDonutText: \"YTD Energy\",\n      pieData: energyConsumptionData,\n      isLoading,\n      formatterValue,\n      renderTooltipValue,\n    };\n    return result;\n  }, [query]);\n};\n\n/**\n * useQueryEnergyRanking\n * This hook will use to query energy ranking\n * @param country: string\n * @returns UseQueryResult<EnergyRanking[] | undefined, unknown>\n */\nexport const useQueryEnergyRanking = (country: string) => {\n  const query = useQuery(\n    [`energy-ranking-${country}`],\n    async () => {\n      try {\n        const res = await getEnergyRanking(country);\n        return res.data || [];\n      } catch (error) {\n        //\n      }\n    },\n    { enabled: !!country, placeholderData: [] }\n  );\n  return query;\n};\n\n/**\n * useEnergyRankingData\n * This hook will use to get energy ranking data\n * @param isDensity: boolean;\n * @param country: string\n * @returns { isLoading: boolean; data: RankingChartItem[]; unit: string; minFractionDigits: number;dataResource: EnergyRanking[];}\n */\nexport const useEnergyRankingData: (\n  isDensity: boolean,\n  country: string\n) => {\n  isLoading: boolean;\n  data: RankingChartItem[];\n  unit: string;\n  minFractionDigits: number;\n  dataResource: EnergyRanking[];\n} = (isDensity, country) => {\n  const query = useQueryEnergyRanking(country);\n  const { data = [], isLoading } = query;\n  return React.useMemo(() => {\n    const values = data.map((i) => (isDensity ? i.energy_density : i.energy));\n    const { divide, unit, minFractionDigits } = findDivideBaseOnValuesEC(\n      values,\n      isDensity\n    );\n    const dataResource: EnergyRanking[] = [];\n    const result = {\n      isLoading,\n      data: data.map((i) => {\n        const { energy, energy_density, id, buildingname } = i;\n        const value = isDensity ? energy_density : energy;\n        const dividedValue = value / divide;\n        return {\n          id: String(id),\n          label: buildingname,\n          value: dividedValue,\n        };\n      }) as RankingChartItem[],\n      unit,\n      minFractionDigits,\n      dataResource,\n    };\n    return result;\n  }, [query, isDensity]);\n};\n\n/**\n * useMutationOperationEnergyRanking\n * This hook will use to create / update energy ranking\n * @returns UseMutationResult<APIResponse, unknown, number, unknown>\n */\nexport const useMutationOperationEnergyRanking = (country: string) => {\n  const queryClient = useQueryClient();\n  const mutation = useMutation(\n    async ({ buildingname, info }: { buildingname: string; info: any }) => {\n      await operationEnergyRanking(country, buildingname, info);\n    },\n    {\n      onSuccess() {\n        queryClient.refetchQueries([`energy-ranking-${country}`]);\n      },\n    }\n  );\n  return mutation;\n};\n\n/**\n * useMutationDeleteEnergyRanking\n * This hook will use to remove energy ranking record\n * @returns UseMutationResult<APIResponse, unknown, number, unknown>\n */\nexport const useMutationDeleteEnergyRanking = (country: string) => {\n  const queryClient = useQueryClient();\n  const mutation = useMutation(\n    (regionId: number) => deleteEnergyRanking(regionId),\n    {\n      onSuccess() {\n        queryClient.refetchQueries([`energy-ranking-${country}`]);\n      },\n    }\n  );\n  return mutation;\n};\n\n/**\n * useQueryAlertsAndTickets\n * This hook will use for query alerts and tickets data\n * @returns UseMutationResult<AlertsAndTickets, unknown, number, unknown>\n */\nexport const useQueryAlertsAndTickets = (country: string) => {\n  const query = useQuery([`alerts-and-tickets-${country}`], async () => {\n    const response = await getAlertsTickets(country);\n    return response.data;\n  });\n  return query;\n};\n\n/**\n * useQueryAlertsAndTicketsData\n * This hook will use for mapping alerts and tickets data\n * @returns { isLoading: boolean; alerts: string; tickets: string; resource: AlertsAndTickets | undefined;}\n */\nexport const useQueryAlertsAndTicketsData: (country: string) => {\n  isLoading: boolean;\n  alertsFormatted: string;\n  ticketsFormatted: string;\n  alertsDisplayName: string;\n  ticketsDisplayName: string;\n  resource: AlertsAndTickets | undefined;\n} = (country) => {\n  const query = useQueryAlertsAndTickets(country);\n  return React.useMemo(() => {\n    const { data, isLoading } = query;\n    if (!data) {\n      return {\n        isLoading,\n        resource: undefined,\n        alertsFormatted: \"-\",\n        ticketsFormatted: \"-\",\n        alertsDisplayName: \"-\",\n        ticketsDisplayName: \"-\",\n      };\n    }\n    const result = {\n      isLoading,\n      alertsFormatted: `${data[ALERTS]}`,\n      ticketsFormatted: `${data[TICKETS]}`,\n      resource: data,\n      alertsDisplayName: data[ALERTS_DISPLAY_NAME],\n      ticketsDisplayName: data[TICKETS_DISPLAY_NAME],\n    };\n    return result;\n  }, [query]);\n};\n\nexport const useMutationAlertsAndTickets = (country: string) => {\n  const queryClient = useQueryClient();\n  const mutation = useMutation(\n    (info: {\n      [ALERTS]: number;\n      [TICKETS]: number;\n      [ALERTS_DISPLAY_NAME]: string;\n      [TICKETS_DISPLAY_NAME]: string;\n    }) => operationAlertsTickets({ country, ...info }),\n    {\n      onSuccess() {\n        queryClient.refetchQueries([`alerts-and-tickets-${country}`]);\n      },\n    }\n  );\n  return mutation;\n};\n","import React from \"react\";\nimport useWindowDimensions from \"hooks/useWindowDimensions\";\nimport { D3HierachyChart3D } from \"components/charts/D3Hierachy\";\nimport Panel from \"components/core/Panel\";\nimport isEqual from \"lodash/isEqual\";\nimport toUpper from \"lodash/toUpper\";\nimport BreakLine from \"components/core/BreakLine\";\nimport { Region } from \"./Map.typings\";\nimport { useGeojsonRegions, useRegionListData } from \"./Map.hooks\";\nimport \"./Map.style.scss\";\n\nconst HierachyMap = () => {\n  const { height } = useWindowDimensions();\n  const { geojsonRegions, isLoading } = useGeojsonRegions();\n  const { regionList } = useRegionListData();\n  const renderTooltip = ({ name }: { name: string }) => {\n    let child = null;\n    const upperName = toUpper(name);\n    const regionHover = regionList.find((r: Region) =>\n      isEqual(upperName, r.regionname)\n    );\n    if (regionHover) {\n      const {\n        energy_densisty_YTD_formatted,\n        buildings_formatted,\n        floor_area_formatted,\n        active_alerts_formatted,\n        open_tickets_formatted,\n      } = regionHover as unknown as Region;\n      child = (\n        <>\n          <div\n            className=\"grid items-center gap-2 justify-between\"\n            style={{\n              gridTemplateColumns: \"repeat(2, minmax(100px, 50%))\",\n            }}\n          >\n            <div className=\"text-xs truncate text-gray-400\">{`${buildings_formatted} Buildings`}</div>\n            <div className=\"text-right text-xs truncate text-gray-400\">\n              {floor_area_formatted}\n            </div>\n          </div>\n          <BreakLine className=\"my-2\" />\n          <div className=\"flex flex-row justify-around gap-3 p-3\">\n            {[\n              {\n                title: \"Energy Density YTD\",\n                value: energy_densisty_YTD_formatted,\n              },\n              {\n                title: \"Active Alerts\",\n                value: active_alerts_formatted,\n              },\n              {\n                title: \"Open Tickets\",\n                value: open_tickets_formatted,\n              },\n            ].map(({ title, value }) => (\n              <div key={title}>\n                <div className=\"text-sm font-medium text-white text-center truncate mb-1 sub-font\">\n                  {value}\n                </div>\n                <div className=\"text-xs text-gray-500 truncate\">{title}</div>\n              </div>\n            ))}\n          </div>\n        </>\n      );\n    } else {\n      child = <div className=\"abs-center\">Not data yet!</div>;\n    }\n\n    return (\n      <Panel\n        className=\"w-fit min-w-[380px] max-w-[400px] h-auto min-h-[150px]\"\n        title={upperName}\n        panelTitleClassName=\"text-sm\"\n        classNameBlockTitle=\"mb-2\"\n      >\n        {!!child && child}\n      </Panel>\n    );\n  };\n\n  return (\n    <D3HierachyChart3D\n      data={{\n        hierachy: geojsonRegions,\n        width: \"auto\",\n        height: height - 240,\n      }}\n      renderTooltip={renderTooltip}\n      isLoading={isLoading}\n      classNameContainer=\"z-1\"\n    />\n  );\n};\n\nexport default React.memo(HierachyMap);\n","import Panel from \"components/core/Panel\";\nimport React from \"react\";\nimport \"./Map.style.scss\";\nimport { useActivedCountry, useQueryAlertsAndTicketsData } from \"./Map.hooks\";\n\nconst AlertsAndTickets = () => {\n  const { countryName: country } = useActivedCountry();\n  const {\n    alertsFormatted,\n    ticketsFormatted,\n    alertsDisplayName,\n    ticketsDisplayName,\n    isLoading,\n  } = useQueryAlertsAndTicketsData(country);\n  return (\n    <Panel\n      title={`${alertsDisplayName} & ${ticketsDisplayName}`}\n      isLoading={isLoading}\n      classNameBlockTitle=\"mb-3\"\n      panelTitleClassName=\"text-base\"\n    >\n      <div className=\"grid items-center gap-8 justify-center abs-center block-alerts-tickets w-[100%]\">\n        {[\n          {\n            label: `Total ${alertsDisplayName}`,\n            value: alertsFormatted,\n            sub: \"\",\n            icon: (\n              <i className=\"fa-solid fa-triangle-exclamation text-red-500 fa-2x\" />\n            ),\n          },\n          {\n            label: `Total ${ticketsDisplayName}`,\n            value: ticketsFormatted,\n            sub: \"\",\n            icon: <i className=\"fa-solid fa-list text-yellow-500 fa-2x\" />,\n          },\n        ].map(({ label, value, sub, icon }, index) => (\n          <div\n            key={label}\n            className={`flex flex-col justify-center items-center ${\n              index === 0 ? \"justify-self-end\" : \"justify-self-start\"\n            }`}\n          >\n            <div className=\"text-sm text-gray-500 font-medium mb-2\">\n              {label}\n            </div>\n            <div className=\"grid items-center gap-3 alert-tickets-extra\">\n              <div>{icon}</div>\n              <div className=\"text-2xl sub-font font-medium truncate text-center\">\n                {value}\n              </div>\n              <div className=\"text-xs text-gray-500\">{sub}</div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Panel>\n  );\n};\n\nexport default React.memo(AlertsAndTickets);\n","import Panel from \"components/core/Panel\";\nimport D3Ranking from \"components/charts/Ranking\";\nimport React from \"react\";\nimport { Button } from \"antd\";\nimport \"./Map.style.scss\";\nimport { useActivedCountry, useEnergyRankingData } from \"./Map.hooks\";\nimport { formatterValueToLocaleString } from \"./Map.utils\";\n\nconst factories = [\n  {\n    key: \"energy\",\n    tab: \"Energy\",\n  },\n  {\n    key: \"energy-density\",\n    tab: \"Energy Density\",\n  },\n];\n\nconst Ranking = () => {\n  const [selected, setSelected] = React.useState(factories[0].key);\n  const { countryName: country } = useActivedCountry();\n  const { data, isLoading, unit, minFractionDigits } = useEnergyRankingData(\n    selected === \"energy-density\",\n    country\n  );\n  return (\n    <Panel\n      title=\"Ranking\"\n      sub={\n        <div className=\"flex justify-end\">\n          {factories.map(({ key, tab }) => {\n            const isSelected = key === selected;\n            return (\n              <Button\n                key={key}\n                onClick={() => setSelected(key)}\n                type={isSelected ? \"primary\" : \"default\"}\n              >\n                {tab}\n              </Button>\n            );\n          })}\n        </div>\n      }\n      isLoading={isLoading}\n      classNameBlockTitle=\"block-ranking-title mb-3\"\n      panelTitleClassName=\"text-base\"\n    >\n      <D3Ranking\n        data={{\n          rankingData: data,\n          formatterValue: ({ value }) =>\n            formatterValueToLocaleString({\n              value,\n              divide: 1,\n              unit,\n              fractionDigits: minFractionDigits,\n            }),\n        }}\n      />\n    </Panel>\n  );\n};\n\nexport default React.memo(Ranking);\n","import Panel from \"components/core/Panel\";\nimport D3PieChart from \"components/charts/D3Pie\";\nimport React from \"react\";\nimport { useEnergyConsumptionData } from \"./Map.hooks\";\n\nconst EnergyConsumption = () => {\n  const {\n    pieData,\n    donutText,\n    subDonutText,\n    isLoading,\n    formatterValue,\n    renderTooltipValue,\n  } = useEnergyConsumptionData();\n  return (\n    <Panel\n      title=\"Energy Consumption\"\n      isLoading={isLoading}\n      classNameBlockTitle=\"mb-3\"\n      panelTitleClassName=\"text-base\"\n    >\n      <D3PieChart\n        data={{\n          size: 125,\n          pieData,\n          formatterValue,\n          quantitiesItemOnChart: 5,\n          donutText,\n          subDonutText,\n          renderTooltipValue,\n        }}\n      />\n    </Panel>\n  );\n};\n\nexport default React.memo(EnergyConsumption);\n","import React from \"react\";\nimport bg from \"assets/images/background-map.png\";\nimport \"./Map.style.scss\";\nimport HierachyMap from \"./Map.HierachyMap\";\nimport AlertsAndTickets from \"./Map.AlertsAndTickets\";\nimport Ranking from \"./Map.Ranking\";\nimport EnergyConsumption from \"./Map.EnergyConsumption\";\n\nconst MapPage = () => (\n  <div className=\"relative map-page\">\n    <div\n      className=\"bg-no-repeat bg-center bg-auto opacity-50 absolute left-0 top-0 w-[100%] h-[100%]\"\n      style={{\n        backgroundImage: `url(${bg})`,\n      }}\n    />\n    <div className=\"bg-flash\" />\n    <HierachyMap />\n    <div className=\"extra grid gap-8 mt-5 absolute bottom-0 left-0 z-50 px-5 pb-3 extra\">\n      <EnergyConsumption />\n      <Ranking />\n      <AlertsAndTickets />\n    </div>\n  </div>\n);\nexport default React.memo(MapPage);\n","import { createStore } from \"zustand-store\";\nimport { GeojsonPropertyList } from \"./Map.typings\";\n\ntype IState = {\n  country: number;\n  geojsonPropertyList: GeojsonPropertyList[];\n};\n\ninterface IActions {\n  actionSetSelectedCountry: (country: number) => any;\n  actionSetGeojsonPropertyList: (data: GeojsonPropertyList) => any;\n}\n\nconst initialState = {\n  country: -1,\n  geojsonPropertyList: [],\n};\n\nexport const [useMapStore, { getState }] = createStore<IState & IActions>(\n  (set, get) => ({\n    ...initialState,\n    actionSetSelectedCountry: (country) => set({ country }),\n    actionSetGeojsonPropertyList: (data) =>\n      set({ geojsonPropertyList: [...get().geojsonPropertyList, data] }),\n  }),\n  \"MapStore\"\n);\n","import Map from \"./Map\";\n\nexport * from \"./Map.zustand\";\nexport * from \"./Map.services\";\nexport * from \"./Map.hooks\";\nexport * from \"./Map.typings\";\nexport * from \"./Map.constant\";\nexport * from \"./Map.utils\";\n\nexport default Map;\n","/**\n * isJSONString is a function to check a valid json string\n * reference link: https://thewebdev.info/2021/06/12/how-to-check-if-a-string-is-json-in-javascript/\n * @param jsonString - a json string\n * @returns boolean\n */\nexport const isJSONString = (jsonString: string) => {\n  let result = true;\n  try {\n    JSON.parse(jsonString);\n  } catch (e) {\n    result = false;\n  }\n  return result;\n};\n"],"names":["$echartsMap","Stack","stack","this","item","push","pop","isEmpty","undefined","size","length","stack3D","createHierachyChart3D","paramsFnc","$echartMapEle","hierachy","container","renderTooltip","width","height","$container","d3","dispose","geometry","children","name","nameProperty","id","append","attr","node","echarts","showLoading","mapName","mapEcharts","regions","scaleColor","defaultAreaColor","rbgShadowColor","opacity","rgbaShadowColor","String","options","geo","map","zoom","roam","animation","label","show","itemStyle","areaColor","shadowColor","shadowOffsetX","shadowOffsetY","series","type","selectedMode","color","shadowBlur","emphasis","data","r","rgbColor","emphasisShadowColor","focus","tooltip","trigger","formatter","params","feature","features","find","f","isEqual","properties","padding","borderWidth","setOption","hideLoading","renderEchartsMap","isStackEmpty","handleEvent","child","dataIndex","c","on","peek","option","getOption","center","error","D3Hierachy","isLoading","rest","ref","React","callbackRenderTooltip","dt","$tooltip","Object","entries","key","value","className","classNames","styles","ReactDOM","current","remove","defaultProps","ENV","PUBLIC_URL","ASSETS_PATH","API_DOMAIN_URL","process","getWindowDimensions","window","innerWidth","innerHeight","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","STANDARD_ENERGY_CONSUMPTION_UNIT","ENERGY_BASE_UNIT","ENERGY_DENSITY_AREA_BASE_UNIT","CARBON_BASE_UNIT","CARBON_DENSITY_BASE_UNIT","EC_UNITS","baseWatt","kgWatt","megaWatt","gigaWatt","convertECByUnit","unit","valConverted","isNaN","findDivideBaseOnValuesEC","values","isDensity","divide","maxValue","max","minFractionDigits","minValue","min","Math","floor","log10","formatterValueToLocaleString","fractionDigits","locale","toLocaleString","minimumFractionDigits","convertMapPropertiesToCoordinates","regionMapProperties","hierachyData","listProperties","forEach","i","index","mapProperty","geojson","mapProperties","geojsonMapping","coordinates","split","propertyName","foundCoordinates","gItem","toLower","polygon","createFeature","fItem","uniq","convertFromStringToArrayPropertyList","p","toUpper","Panel","title","sub","classNameBlockTitle","childrenCenter","panelTitleClassName","Loading","http","HTTP","baseURL","controller","requestInit","AbortController","cache","mode","headers","credentials","redirect","referrerPolicy","url","signal","fetch","method","then","res","json","catch","Error","body","JSON","stringify","abort","getMapGeneral","get","getGeojsonMapOfACountry","country","operationGeojsonMapOfACountry","post","getPropertyList","getRegion","region","createRegion","updateInfo","regionname","updateRegion","put","deleteRegion","getAlertsTickets","operationAlertsTickets","getEnergyConsumption","getEnergyRanking","getListCountry","getRegionList","deleteGeojsonMap","countryId","delete","activeGeojsonMap","getCountryStatusList","operationEnergyRanking","buildingname","deleteEnergyRanking","REGION_NAME","REGION_COORDINATES","REGION_ENERGY_CONSUMPTION","REGION_ENERGY_DENSITY_CONSUMPTION","REGION_OPEN_TICKETS","REGION_ALERT_TICKETS","REGION_BUILDINGS","REGION_FLOOR_AREA","REGION_TIME","REGION_RECORD_COLUMN","ENERGY_RANKING_BUILDING_NAME","ENERGY_RANKING_ENERGY","ENERGY_RANKING_ENERGY_DENSITY","ENERGY_RANKING_RECORD_COLUMN","GEOJSON_INFO_COUNTRY","GEOJSON_INFO_DATA","GEOJSON_INFO_RECORD_COLUMN","ALERTS","TICKETS","ALERTS_DISPLAY_NAME","TICKETS_DISPLAY_NAME","DISPLAY_NAME","ALERT_AND_TICKETS_RECORD_COLUMN","useCountryStatusList","actionSetSelectedCountry","useMapStore","useQuery","onSuccess","activedCountry","actived","placeholderData","useSelectedCountry","geojsonPropertyList","propertyList","d","useActivedCountry","defaultCountry","countryName","useRegionList","enabled","usePropertyList","actionSetGeojsonPropertyList","list","useGeojsonCountry","useRegionListData","regionQueries","useQueries","queries","queryKey","queryFn","some","regionQuery","regionList","filter","energy_densisty_YTD","energy_densisty_YTD_formatted","buildings_formatted","buildings","floor_area_formatted","floor_area","active_alerts_formatted","active_alerts","open_tickets_formatted","open_tickets","regionListIds","regionListName","map_properties","mapPropertiesParse","isJSONString","parse","useHierachyCountryData","jsonString","useGeojsonRegions","loadingGeojson","loadingRegionList","loadingPropertyList","regionCoordinates","geojsonRegions","useMutationDeleteCountry","queryClient","useQueryClient","useMutation","invalidateQueries","useMutationUpdateActiveCountry","useMutationAutoGenerateRegion","Promise","all","refetchQueries","exact","useMutationDeleteRegion","regionId","useMutationOperationRegion","isCreate","mutation","info","useMutationOperationGeojsonMapOfACountry","useQueryEnergyConsumption","result","useEnergyConsumptionData","query","energyconsumption","energyConsumptionData","total","sum","donutText","subDonutText","pieData","formatterValue","percent","renderTooltipValue","useQueryEnergyRanking","useEnergyRankingData","energy_density","energy","dividedValue","dataResource","useMutationOperationEnergyRanking","useMutationDeleteEnergyRanking","useQueryAlertsAndTickets","response","useQueryAlertsAndTicketsData","alertsFormatted","ticketsFormatted","resource","alertsDisplayName","ticketsDisplayName","useMutationAlertsAndTickets","HierachyMap","useWindowDimensions","upperName","regionHover","style","gridTemplateColumns","BreakLine","classNameContainer","AlertsAndTickets","icon","factories","tab","Ranking","selected","setSelected","isSelected","onClick","rankingData","EnergyConsumption","D3Pie","quantitiesItemOnChart","MapPage","backgroundImage","bg","initialState","createStore","set","getState","e"],"sourceRoot":""}
{"version":3,"file":"static/js/638.34951d26.chunk.js","mappings":"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","sources":["components/charts/D3Hierachy/D3Hierachy.utils.ts","utils/stack.ts","webpack://poc-app/./src/components/charts/D3Hierachy/D3Hierachy.styles.module.scss?8ed6","components/charts/D3Hierachy/D3Hierachy.3D.tsx","env/index.ts","pages/hierachy_chart/HierachyChart.tsx","pages/hierachy_chart/index.ts"],"sourcesContent":["/* eslint-disable no-bitwise */\n/* eslint-disable prefer-arrow-callback */\nimport * as d3 from \"d3\";\nimport { ENV } from \"env\";\nimport { cachePromise } from \"utils/cachePromise\";\nimport * as echarts from \"echarts\";\nimport Stack from \"utils/stack\";\nimport isEqual from \"lodash/isEqual\";\nimport { HierachyData } from \"./D3Hierachy.typings\";\n\nconst stack2D = new Stack();\nconst stack3D = new Stack();\n\nconst renderEchartsMap = ({\n  hierachy,\n  mapName,\n  mapEcharts,\n  nameProperty,\n  renderTooltip,\n}: {\n  hierachy: HierachyData;\n  mapName: string;\n  mapEcharts: echarts.EChartsType;\n  nameProperty: string | any;\n  renderTooltip: (feature: any) => any;\n}) => {\n  const { geometry, regions = [] } = hierachy;\n  const scaleColor = d3.scaleOrdinal(regions, d3.schemeCategory10);\n  echarts.registerMap(mapName, geometry);\n  const defaultAreaColor = \"#333D3F\";\n  const rbgDefaultAreaColor = d3.color(defaultAreaColor) as d3.RGBColor;\n  const rbgShadowColor = rbgDefaultAreaColor;\n  rbgShadowColor.opacity = 0.5;\n  const rgbaShadowColor = String(rbgShadowColor);\n  const options = {\n    geo: {\n      map: mapName,\n      zoom: 1,\n      roam: true,\n      animation: false,\n      nameProperty,\n      label: {\n        show: false,\n      },\n      itemStyle: {\n        areaColor: defaultAreaColor,\n        shadowColor: rgbaShadowColor,\n        shadowOffsetX: 0,\n        shadowOffsetY: 10,\n      },\n    },\n    series: [\n      {\n        name: \"map\",\n        type: \"map\",\n        map: mapName,\n        selectedMode: false,\n        roam: true,\n        label: {\n          show: false,\n          color: \"#ffffff\",\n        },\n\n        itemStyle: {\n          areaColor: defaultAreaColor,\n          shadowColor: rgbaShadowColor,\n          shadowOffsetX: -2,\n          shadowOffsetY: 2,\n          shadowBlur: 10,\n        },\n        emphasis: {\n          label: {\n            color: \"#ffffff\",\n          },\n          itemStyle: {\n            areaColor: \"#6289AB\",\n            shadowColor: rgbaShadowColor,\n            shadowOffsetX: 0,\n            shadowOffsetY: 10,\n          },\n        },\n        data: regions.map((r) => {\n          const areaColor = scaleColor(r);\n          const rgbColor = d3.color(areaColor) as d3.RGBColor;\n          const shadowColor = rgbColor;\n          shadowColor.opacity = 1;\n          const emphasisShadowColor = rgbColor;\n          emphasisShadowColor.opacity = 0.5;\n          return {\n            name: r,\n            label: {\n              show: false,\n              color: \"#FFF\",\n            },\n            itemStyle: {\n              areaColor,\n              shadowColor: String(shadowColor),\n              shadowOffsetX: 0,\n              shadowOffsetY: 10,\n            },\n            emphasis: {\n              focus: \"self\",\n              label: {\n                color: \"#FFFFFF\",\n                show: true,\n              },\n              itemStyle: {\n                areaColor,\n                shadowColor: String(emphasisShadowColor),\n                shadowOffsetX: 0,\n                shadowOffsetY: 10,\n              },\n            },\n          };\n        }),\n      },\n    ],\n    tooltip: {\n      show: true,\n      trigger: \"item\" as any,\n      formatter: (params: { [key: string]: any } | any[] | any) => {\n        const { name } = params;\n        const feature = geometry?.features.find((f: any) =>\n          isEqual(f?.properties?.name, name)\n        );\n        if (feature) {\n          return renderTooltip({ feature, name });\n        }\n        return \"\";\n      },\n      // alwaysShowContent: true,\n      padding: 0,\n      borderWidth: 0,\n    },\n  };\n  mapEcharts.setOption(options);\n  mapEcharts.hideLoading();\n};\n\nlet $echartsMap: echarts.EChartsType | any;\n/**\n * createHierachyChart3D this function using for generator 3D map\n * @param container - HTMLDivElement div container -> using for draw map\n * @param hierachy - HierachyData recursive json data\n */\nexport const createHierachyChart3D = (paramsFnc: {\n  container: HTMLDivElement;\n  hierachy: HierachyData;\n  renderTooltip: (feature: any) => any;\n  width: number | any;\n  height: number | any;\n}) => {\n  let $echartMapEle;\n  try {\n    const { hierachy, container, renderTooltip, width, height } = paramsFnc;\n    const $container = d3.select(container);\n    if (!hierachy) {\n      $echartsMap.dispose();\n      return;\n    }\n    const {\n      geometry, // geometry json\n      children = [], // children hierachy recursive\n      name, // name map\n      nameProperty = \"name\", // https://echarts.apache.org/en/option.html#geo.nameProperty\n      // useAssetPath = false, // if useAssetPath === true -> get geometry data from asset resource (geometry is really heavy)\n      id,\n    } = hierachy;\n    // bind id for container\n\n    if ($echartsMap) {\n      $echartsMap.dispose(); // trick for re-draw chart\n    }\n    $echartMapEle = $container.append(\"div\").attr(\"id\", id).node() as any;\n    // init chart -> $echartsMap is instance of echarts.EChartsType\n    $echartsMap = echarts.init($echartMapEle, undefined, { width, height });\n    // show loading\n    $echartsMap.showLoading();\n    // function to render Echarts map\n    renderEchartsMap({\n      hierachy,\n      mapName: name,\n      mapEcharts: $echartsMap,\n      nameProperty,\n      renderTooltip,\n    });\n    const isStackEmpty = stack3D.isEmpty();\n    const handleEvent = ({ dataIndex }: any) => {\n      let child;\n      // get feature base on index\n      const feature = geometry.features[dataIndex];\n      // find geometry feature base on properties\n      if (feature) {\n        child = children.find((c) =>\n          isEqual(c.name, feature?.properties?.name)\n        );\n      }\n      return child;\n    };\n    // handle for event on click area\n    $echartsMap.on(\"click\", (params: any) => {\n      // when click to area (district, states, province,...)\n      // if they have children (mean it's hierachy) ->\n      // push current hierachy to stack + re-create chart base on data\n      const child: HierachyData | any = handleEvent(params);\n      if (child) {\n        stack3D.push(hierachy);\n        createHierachyChart3D({ ...paramsFnc, hierachy: child });\n      }\n    });\n    // handle for event go back when double click area\n    $echartsMap.on(\"dblclick\", (params: any) => {\n      const child: HierachyData | any = handleEvent(params);\n      if (!isStackEmpty) {\n        // when stack is empty -> we no need back\n        if (!child) {\n          const peek = stack3D.peek();\n          stack3D.pop();\n          createHierachyChart3D({\n            ...paramsFnc,\n            hierachy: peek as unknown as HierachyData,\n          });\n        }\n      }\n    });\n    // handle for event zoom\n    $echartsMap.on(\"georoam\", (params: any) => {\n      const option: any = $echartsMap.getOption();\n      if (params.zoom) {\n        option.geo[0].zoom = option.series[0].zoom;\n        option.geo[0].center = option.series[0].center;\n      } else {\n        option.geo[0].center = option.series[0].center;\n      }\n      $echartsMap.setOption(option);\n    });\n  } catch (error) {\n    //\n  }\n  return $echartMapEle;\n};\n\nexport const createHierachyChart2D = async (params: {\n  svg: SVGSVGElement;\n  container: HTMLDivElement;\n  hierachy: HierachyData;\n  width?: number | any;\n  height?: number | any;\n}) => {\n  try {\n    const { svg, hierachy, width = 800, height = 400 } = params;\n    const {\n      geometry: geometryPath,\n      children = [],\n      // points = [],\n    } = hierachy;\n    const assetPath = `${ENV.ASSETS_PATH}/${geometryPath}`;\n    const geometry: any = await cachePromise(assetPath, () =>\n      d3.json(assetPath)\n    );\n    const $svg = d3\n      .select(svg)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewbox\", `0,0,${width},${height}`);\n    $svg.html(\"\");\n    // draw map\n    const centroid = d3.geoPath().centroid(geometry);\n    const projection = d3 // https://github.com/d3/d3-geo#projections\n      .geoMercator()\n      .scale(1 / (2 * Math.PI))\n      .translate(centroid)\n      .fitSize([width, height], geometry);\n    // Generator map from project + geometry data: https://github.com/d3/d3-geo#geoPath\n    // NOTE: every map will has difference projection (scale, center, translate, v...v). We need research source from google to make sure it can be work\n    const color = d3.scaleOrdinal(geometry.features, d3.schemeCategory10);\n    const printData = (render: any) => {\n      $svg.html(\"\");\n      geometry.features.forEach((item: any) => {\n        $svg\n          .append(\"path\")\n          .datum(item)\n          .attr(\"class\", \"geometry-map\")\n          .attr(\"pointer-events\", \"visible\")\n          .attr(\"stroke\", \"#777\")\n          .attr(\"stroke-width\", 0.5)\n          .attr(\"stroke-linejoin\", \"round\")\n          .attr(\"cursor\", \"pointer\")\n          .attr(\"fill\", \"none\")\n          .attr(\"d\", (d: any) => render(d))\n          .each(function eachSelection(d) {\n            const $this = d3.select(this);\n            const child = children.find((c) => c.id === d.properties.id);\n            const hasChild = !!child?.id;\n            const isStackEmpty = stack2D.isEmpty();\n            if (hasChild) {\n              $this.attr(\"opacity\", 1);\n              $this.attr(\"fill\", color(d));\n            } else {\n              $this.attr(\"opacity\", 0.5);\n            }\n            $this\n              .on(\"mouseover\", function onMouseOver() {\n                $this.attr(\"opacity\", 1);\n                if (!hasChild) {\n                  $this.attr(\"fill\", \"#FFF\");\n                }\n              })\n              .on(\"mouseleave\", function onMouseLeave() {\n                if (!hasChild) {\n                  $this.attr(\"opacity\", 0.5);\n                  $this.attr(\"fill\", \"none\");\n                }\n              })\n              .on(\"click\", function onClick() {\n                if (hasChild) {\n                  // has child -> continue\n                  stack2D.push(hierachy);\n                  createHierachyChart2D({ ...params, hierachy: child });\n                }\n              })\n              .on(\"dblclick\", function onDoubleClick() {\n                if (!isStackEmpty) {\n                  // check if stack2D is not empty (initial case)\n                  if (!hasChild) {\n                    // item don't have children -> go back\n                    const peek = stack2D.peek();\n                    stack2D.pop();\n                    createHierachyChart2D({\n                      ...params,\n                      hierachy: peek as unknown as HierachyData,\n                    });\n                  }\n                }\n              });\n          });\n      });\n    };\n    printData(d3.geoPath(projection));\n  } catch (error) {\n    //\n  }\n};\n","class Stack {\n  stack: any[];\n\n  constructor() {\n    this.stack = [];\n  }\n\n  push(item: any) {\n    this.stack.push(item);\n  }\n\n  pop() {\n    this.stack.pop();\n  }\n\n  peek() {\n    return !this.isEmpty() ? this.stack[this.size - 1] : undefined;\n  }\n\n  isEmpty() {\n    return this.size === 0;\n  }\n\n  get size() {\n    return this.stack.length;\n  }\n\n  get stackItems() {\n    return this.stack;\n  }\n}\n\nexport default Stack;\n","// extracted by mini-css-extract-plugin\nexport default {\"tooltip\":\"D3Hierachy_styles_tooltip__IO1VA\"};","import React from \"react\";\nimport D3Chart, { IBaseD3ChartProps } from \"components/charts/D3Chart\";\nimport classNames from \"classnames\";\nimport ReactDOM from \"react-dom/server\";\nimport * as d3 from \"d3\";\nimport { createHierachyChart3D } from \"./D3Hierachy.utils\";\nimport { HierachyData } from \"./D3Hierachy.typings\";\nimport styles from \"./D3Hierachy.styles.module.scss\";\n\ninterface IProps extends IBaseD3ChartProps {\n  data: {\n    hierachy: HierachyData | any;\n    width: number | any;\n    height: number | any;\n  };\n  renderTooltip?: (data: {\n    feature: any;\n    name: string;\n  }) => React.ReactNode | React.ReactElement | any;\n}\n\nconst D3Hierachy: React.FC<IProps> = ({\n  data,\n  renderTooltip,\n  isLoading,\n  ...rest\n}: IProps) => {\n  const ref = React.useRef(null);\n  const callbackRenderTooltip = (dt: { feature: any; name: string }) => {\n    let $tooltip;\n    const { feature } = dt;\n    if (typeof renderTooltip === \"function\") {\n      $tooltip = renderTooltip(dt);\n    } else {\n      $tooltip = (\n        <div>\n          {Object.entries(feature?.properties).map(\n            ([key, value]: [string, any]) => (\n              <div\n                className={`grid gap-3 ${classNames(styles.tooltip)}`}\n                key={key}\n              >\n                <div className=\"font-medium text-base text-black\">{key}</div>\n                {value && <div>{value}</div>}\n              </div>\n            )\n          )}\n        </div>\n      );\n    }\n    return ReactDOM.renderToString($tooltip);\n  };\n  React.useEffect(() => {\n    if (isLoading || !ref.current) {\n      return;\n    }\n    const $echartMapEle = createHierachyChart3D({\n      container: ref.current,\n      ...data,\n      renderTooltip: callbackRenderTooltip,\n    });\n    return () => {\n      if ($echartMapEle) {\n        d3.select($echartMapEle).remove();\n      }\n    };\n  }, [ref, data, renderTooltip]);\n  return (\n    <D3Chart\n      {...{\n        ...rest,\n        isLoading,\n        ref: {\n          ref,\n        } as any,\n      }}\n    >\n      {!isLoading && !data.hierachy && <div>Geojson is not valid</div>}\n    </D3Chart>\n  );\n};\n\nD3Hierachy.defaultProps = {\n  renderTooltip: undefined,\n};\n\nexport default React.memo(D3Hierachy);\n","export const ENV = {\n  PUBLIC_URL: process.env.PUBLIC_URL || \"\",\n  ASSETS_PATH: `${process.env.PUBLIC_URL || \"\"}/sampleData`,\n  API_DOMAIN_URL: `${process.env.API_DOMAIN_URL}/demo_service/v1.0`,\n};\n","import React from \"react\";\nimport { D3HierachyChart3D } from \"components/charts/D3Hierachy\";\nimport { useDataResourceStore } from \"pages/data_resource\";\n\nconst HierachyChart = () => {\n  const { hierachy } = useDataResourceStore();\n  if (!hierachy) {\n    return null;\n  }\n  return (\n    <D3HierachyChart3D\n      data={{ hierachy, width: \"100%\", height: 640 }}\n      chartName=\"Hierachy Chart\"\n    />\n  );\n};\n\nexport default React.memo(HierachyChart);\n","import HierachyChart from \"./HierachyChart\";\n\nexport default HierachyChart;\n"],"names":["$echartsMap","Stack","stack","this","item","push","pop","isEmpty","undefined","size","length","stack3D","createHierachyChart3D","paramsFnc","$echartMapEle","hierachy","container","renderTooltip","width","height","$container","d3","dispose","geometry","children","name","nameProperty","id","append","attr","node","echarts","showLoading","mapName","mapEcharts","regions","scaleColor","defaultAreaColor","rbgShadowColor","opacity","rgbaShadowColor","String","options","geo","map","zoom","roam","animation","label","show","itemStyle","areaColor","shadowColor","shadowOffsetX","shadowOffsetY","series","type","selectedMode","color","shadowBlur","emphasis","data","r","rgbColor","emphasisShadowColor","focus","tooltip","trigger","formatter","params","feature","features","find","f","isEqual","properties","padding","borderWidth","setOption","hideLoading","renderEchartsMap","isStackEmpty","handleEvent","child","dataIndex","c","on","peek","option","getOption","center","error","D3Hierachy","isLoading","rest","ref","React","callbackRenderTooltip","dt","$tooltip","Object","entries","key","value","className","classNames","styles","ReactDOM","current","remove","defaultProps","ENV","PUBLIC_URL","process","ASSETS_PATH","API_DOMAIN_URL","HierachyChart","useDataResourceStore","chartName"],"sourceRoot":""}
// import React from "react";
// import D3Hexbin from "components/d3-chart/D3Hexbin";
// import * as d3 from "d3";
// import * as topojson from "topojson";
// import toNumber from "lodash/toNumber";
// import { useLoaderFile } from "hooks/useLoaderFile";
// import values from "lodash/values";
// import sgTxt from "./sg.txt";
// import vnTxt from "./vn.txt";
// import wallmartCSV from "./walmart.tsv";

// interface IState {
//   points: [number, number][];
//   options: any;
//   isLoading: boolean;
// }

// const HexbinMapSG = React.memo(() => {
//   const { loadFile } = useLoaderFile();
//   const { width, height } = React.useMemo(
//     () => ({ width: 1050, height: 750 }),
//     []
//   );
//   const [data, setData] = React.useState<IState>({
//     points: [],
//     options: null,
//     isLoading: true,
//   });
//   const painHexbinData = React.useCallback(async () => {
//     const topojsonSGP = (await d3.json(
//       "https://gist.githubusercontent.com/atwj/b2350b7083c001a74505647a61e89c0e/raw/0637f967d574797186ee9f55b7cbebc757f08ca3/sgtopo.json"
//     )) as TopoJSON.Topology;
//     const geojsonSG = topojson.feature(topojsonSGP, topojsonSGP.objects["sg-"]);
//     // read txt
//     const fileContent = await loadFile({
//       url: sgTxt,
//       type: "txt",
//       options: { determine: "," },
//     });
//     const fileContentParse: any[] = JSON.parse(fileContent as string);
//     const points = fileContentParse.map(
//       ([x, y]) => [toNumber(x), toNumber(y)] as [number, number]
//     ) as [number, number][];
//     // Reference source to get right projection: https://github.com/lsquaredleland/SGP-d3-map/blob/master/js/js.js
//     const projection = d3
//       .geoAlbers()
//       .center([105.15, 1.3])
//       .rotate([1.3, 0])
//       .parallels([0, 5])
//       .scale(1200 * 100)
//       .translate([width / 2, height / 2]);
//     setData({
//       points,
//       options: {
//         data: geojsonSG,
//         projection,
//         geoPath: d3.geoPath(projection),
//       },
//       isLoading: false,
//     });
//   }, []);
//   React.useEffect(() => {
//     painHexbinData();
//   }, []);
//   return (
//     <D3Hexbin
//       {...{
//         points: data.points,
//         options: { ...data.options, width, height },
//         isLoading: data.isLoading,
//         chartName: "Singapor",
//       }}
//     />
//   );
// });

// const HexbinMapWallmart = React.memo(() => {
//   const { loadFile } = useLoaderFile();
//   const { width, height } = React.useMemo(
//     () => ({ width: 975, height: 610 }),
//     []
//   );
//   const [data, setData] = React.useState<IState>({
//     points: [],
//     options: null,
//     isLoading: true,
//   });
//   const fetchHexbinData = React.useCallback(async () => {
//     const topojsonObjUS = (await d3.json(
//       "https://cdn.jsdelivr.net/npm/us-atlas@3/states-albers-10m.json"
//     )) as TopoJSON.Topology;
//     // const geojsonObjUS = topojson.feature(
//     //   topojsonObjUS,
//     //   topojsonObjUS.objects.states
//     // );
//     const geojsonObjUS = topojson.mesh(
//       topojsonObjUS,
//       topojsonObjUS.objects.states as any,
//       (a, b) => a !== b
//     );
//     // read txt
//     const fileContent = await loadFile({
//       url: wallmartCSV,
//       type: "tsv",
//     });
//     const fileContentParse: any[] = JSON.parse(fileContent as string);
//     const points = fileContentParse
//       .map((objPoint) => values(objPoint))
//       .map(([x, y]) => [toNumber(x), toNumber(y)]) as [number, number][];
//     const projection = d3
//       .geoAlbers()
//       .scale(1300)
//       .translate([width / 2 + 100, height / 2]);
//     setData({
//       points,
//       options: {
//         data: geojsonObjUS,
//         projection,
//         geoPath: d3.geoPath(),
//       },
//       isLoading: false,
//     });
//   }, []);
//   React.useEffect(() => {
//     fetchHexbinData();
//   }, []);
//   return (
//     <D3Hexbin
//       chartName="Wallmart"
//       {...{
//         isLoading: data.isLoading,
//         points: data.points,
//         options: {
//           ...data.options,
//           width,
//           height,
//         },
//       }}
//     />
//   );
// });

// const HexbinVietNam = React.memo(() => {
//   const { loadFile } = useLoaderFile();
//   const { width, height } = React.useMemo(
//     () => ({ width: 400, height: 600 }),
//     []
//   );
//   const [data, setData] = React.useState<IState>({
//     points: [],
//     options: null,
//     isLoading: true,
//   });
//   const painHexbinData = React.useCallback(async () => {
//     // get topojson data VN map
//     const topojsonObjVN = (await d3.json(
//       "https://raw.githubusercontent.com/gponster/d3tuts/master/vn-states.json"
//     )) as TopoJSON.Topology;
//     // convert from topojson -> geojson
//     const geojsonVN: any = topojson.feature(
//       topojsonObjVN,
//       topojsonObjVN.objects.states
//     );
//     // read points file
//     const fileContent = await loadFile({
//       url: vnTxt,
//       type: "txt",
//       options: { determine: "," },
//     });
//     const fileContentParse: any[] = JSON.parse(fileContent as string);
//     const points = fileContentParse.map(
//       ([x, y]) => [toNumber(x), toNumber(y)] as [number, number]
//     ) as [number, number][];
//     // projection: reference source https://github.com/d3/d3-geo-projection
//     // refer projection VN: https://jsfiddle.net/5gxacnj2/3/
//     const projection = d3
//       .geoMercator()
//       .center([107.59392803605395, 16.509905144227975])
//       .scale(2000)
//       .translate([width / 2 + 100, height / 2]);
//     setData({
//       points,
//       options: {
//         data: geojsonVN,
//         projection,
//         geoPath: d3.geoPath(projection),
//       },
//       isLoading: false,
//     });
//   }, []);
//   React.useEffect(() => {
//     painHexbinData();
//   }, []);
//   return (
//     <D3Hexbin
//       {...{
//         chartName: "Viet Nam",
//         isLoading: data.isLoading,
//         classNameContainer: "",
//         classNameSVGChart: "m-auto",
//         points: data.points,
//         options: { ...data.options, width, height },
//       }}
//     />
//   );
// });

// const ControlCenter2 = () => (
//   <div className="flex flex-col">
//     <HexbinMapWallmart />
//     <HexbinVietNam />
//     <HexbinMapSG />
//   </div>
// );

// export default React.memo(ControlCenter2);
